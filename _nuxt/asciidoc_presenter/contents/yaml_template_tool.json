{"filename":"yaml_template_tool.adoc","rendered":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">目次</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_はじめに\">🍨はじめに</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_使ってみた感想\">使ってみた感想</a></li>\n</ul>\n</li>\n<li><a href=\"#_ytt_yaml_templating_tool\">🚀 <code>ytt</code> (<em>YAML Templating Tool</em>)</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_インストール\">インストール</a></li>\n<li><a href=\"#_コマンドラインcliでの実行方法\">コマンドライン（CLI）での実行方法</a></li>\n</ul>\n</li>\n<li><a href=\"#_ytt_の文法についてのサンプル集\">📔 <code>ytt</code> の文法についてのサンプル集</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_data-values\">外部の変数（ <em>Data Values</em> ）</a>\n<ul class=\"sectlevel3\">\n<li><a href=\"#_json_データを利用する\"><em>JSON</em> データを利用する</a></li>\n</ul>\n</li>\n<li><a href=\"#_data_values_の型定義data_values_schema\"><em>Data Values</em> の型定義（<em>Data Values Schema</em>）</a>\n<ul class=\"sectlevel3\">\n<li><a href=\"#_schema_の拡張\"><em>Schema</em> の拡張</a></li>\n</ul>\n</li>\n<li><a href=\"#_overlays\">パッチの適用（ <em>Overlays</em> ）</a>\n<ul class=\"sectlevel3\">\n<li><a href=\"#_共通の設定項目を定義する\">共通の設定項目を定義する</a></li>\n</ul>\n</li>\n<li><a href=\"#_template_モジュール\"><em>Template</em> モジュール</a></li>\n<li><a href=\"#_文字列のテンプレートtext_templating\">文字列のテンプレート（<em>Text Templating</em> ）</a></li>\n<li><a href=\"#_コメント\">コメント</a></li>\n<li><a href=\"#_その他\">その他</a></li>\n</ul>\n</li>\n<li><a href=\"#_faq\">🍣FAQ</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_anchoralias_は使えるの\">anchor/alias は使えるの？</a></li>\n<li><a href=\"#_datavalues_で定義した変数を別の_datavalues_から参照したい\"><code>data/values</code> で定義した変数を別の <code>data/values</code> から参照したい</a></li>\n<li><a href=\"#_on_キーが_true_に変換されてしまう\"><code>on</code> キーが <code>true</code> に変換されてしまう</a></li>\n<li><a href=\"#_error_use_of_reserved_keyword_with_is_not_allowed\">Error: use of reserved keyword 'with' is not allowed</a></li>\n</ul>\n</li>\n<li><a href=\"#_おわりに\">😎おわりに</a></li>\n<li><a href=\"#_参考\">📖参考</a></li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_はじめに\">🍨はじめに</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><em>GitHub Actions ワークフロー</em> では <em>YAML</em> のアンカーやエイリアスが使えないため同じ設定を何度も記述しなくてはならない場合がある。<br>\nとてもつらい。設定を変更したいときには全ての箇所を修正する必要があってつらい。</p>\n</div>\n<div class=\"paragraph\">\n<p>そこで <code>ytt</code> を使えばテンプレートファイルから <em>YAML</em> ドキュメントを生成できるので楽ができそう。<br>\nと思って試してみたサンプルを備忘録として残しておく。</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n本記事はバージョン <code>0.37.0</code> での情報。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\" data-md-icon=\"emoji_objects\"></i>\n</td>\n<td class=\"content\">\n<em>GitHub</em> では2021年8月から <a href=\"https://github.blog/changelog/2021-08-25-github-actions-reduce-duplication-with-action-composition/\" target=\"_blank\" rel=\"noopener\"><code>uses</code> キーワードが複合ステップアクション（<em>Composite Action</em>）で使えるようになった</a>ので、ローカルアクションを作成するほうが簡単かもしれない。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_使ってみた感想\">使ってみた感想</h3>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><span class=\"flex items-center text-green-500\"><span class=\"material-icons\">check</span>メリット</span></dt>\n<dd>\n<p><em>YAML</em> ドキュメントのある部分を変数化して使い回すような簡単な共通化であれば、さくっと複数ファイルへの適用もできてうれしい。<br>\n<em>Overlays</em> がすごい便利。</p>\n</dd>\n<dt class=\"hdlist1\"><span class=\"flex items-center text-red-500\"><span class=\"material-icons\">close</span>デメリット</span></dt>\n<dd>\n<p>複雑な共通化をしようとすると、<a href=\"https://github.com/google/starlark-go\" target=\"_blank\" rel=\"noopener\"><em>Starlark</em> 言語</a>を学ぶ必要があってしんどい。<br>\n<em>Overlays</em> の挙動がぜんぜんわからん。ふんいきで使ってる。</p>\n</dd>\n<dt class=\"hdlist1\">結論</dt>\n<dd>\n<p>複数ファイルに対して簡単な共通化をしたいときにとてもうれしい。<br>\n<em>GitHub Actions ワークフロー</em> を複数作成する場合、同じ設定を繰り返し記述することが多いので助かる。</p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_ytt_yaml_templating_tool\">🚀 <a href=\"https://carvel.dev/ytt/\" target=\"_blank\" rel=\"noopener\"><code>ytt</code></a> (<em>YAML Templating Tool</em>)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><em>YAML</em> 用のテンプレートエンジン。<br>\n<code>ytt</code> は <em>テンプレート</em> および <em>Data Values</em> や <em>Overlays</em> ファイルを受け取って <em>YAML</em> ドキュメントを出力する。</p>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">特徴</div>\n<ul>\n<li>\n<p><em>Python</em> っぽいプログラミング言語である <a href=\"https://github.com/google/starlark-go\" target=\"_blank\" rel=\"noopener\"><em>Starlark</em> 言語</a> を内蔵している。</p>\n</li>\n<li>\n<p><em>YAML</em> 構造を把握している。</p>\n</li>\n<li>\n<p>環境変数やアノテーションを使うことで、設定の一部上書きができる。</p>\n</li>\n<li>\n<p><em>Go</em> 言語製なのでシングルバイナリで利用できる。使いやすい。</p>\n</li>\n</ul>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p><em>YAML</em> 構造を把握しているので、テンプレートなどを書く際には <em>YAML</em> ドキュメントにアノテーションを付け加える形になる。<br>\nこのため新たに覚えることが少ないので、さっと使えて便利。</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">他テンプレートエンジン（<em>Jinja2</em> とか）との比較</div>\n<a href=\"https://carvel.dev/ytt/docs/latest/ytt-vs-x/\" target=\"_blank\" rel=\"noopener\">ytt vs x</a> に記載されている。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_インストール\">インストール</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/vmware-tanzu/carvel-ytt/releases\" target=\"_blank\" rel=\"noopener\"><em>GitHub</em> のリリースページ</a>からバイナリファイルをダウンロードして <em>Path</em> を通すだけ。<br>\n<em>Go</em> 言語製のツールはシングルバイナリで利用できるのが素敵。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_コマンドラインcliでの実行方法\">コマンドライン（CLI）での実行方法</h3>\n<div class=\"paragraph\">\n<p>メインのテンプレートファイルだけでなく、後述する <a href=\"#_data-values\"><em>Data Values</em></a> や <a href=\"#_overlays\"><em>Overlays</em></a> のファイルも一緒に読み込ませる。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 1. ytt コマンド実行例</div>\n<div class=\"content\">\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">全てのファイルを指定</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template \\\n  --file main.template.yml \\\n  --file common_data.yml</code></pre>\n  </div>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">ディレクトリを指定</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template \\\n  --file path/to/template/dir \\    <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n  --file-mark '**/*ignore.yml:exclude=true'   <i class=\"conum\" data-value=\"2\"></i><b>(2)</b></code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>指定したディレクトリ以下（サブディレクトリも含む）にある全てのファイルが読み込まれる。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>除外したいファイルパスを指定。詳しくは <a href=\"https://carvel.dev/ytt/docs/latest/file-marks/\" target=\"_blank\" rel=\"noopener\"><em>File Marks</em></a> を参照。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">ファイルに保存する場合</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template \\\n  --file config.yml \\\n  --output-files path/to/outputs/dir</code></pre>\n  </div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_ytt_の文法についてのサンプル集\">📔 <code>ytt</code> の文法についてのサンプル集</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>とりあえずよく使いそうな分だけ（実装コストが高くなる制御構文（if文やfor文）などは除外）。</p>\n</div>\n<div class=\"paragraph\">\n<p><code>ytt</code> を試せる <a href=\"https://carvel.dev/ytt/#playground\" target=\"_blank\" rel=\"noopener\"><em>online playground</em></a> が公式で用意されているため、そこで試してみるといい。</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">YAMLドキュメント</div>\n<em>YAML</em> ドキュメントは1ファイルに複数ふくめることができる（<code>---</code> 区切り）。<br>\nよって <em>ファイル</em> と <em>ドキュメント</em> の呼び方の違いに気をつける。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data-values\">外部の変数（ <a href=\"https://carvel.dev/ytt/docs/latest/ytt-data-values/\" target=\"_blank\" rel=\"noopener\"><em>Data Values</em></a> ）</h3>\n<div class=\"paragraph\">\n<p>別ファイルに記述した <em>YAML</em> ドキュメントの <code><em>key:value</em></code> は、 <a href=\"https://carvel.dev/ytt/docs/latest/ytt-data-values/\" target=\"_blank\" rel=\"noopener\"><em>Data Values</em></a> として宣言すれば変数として参照することができる。</p>\n</div>\n<div class=\"paragraph\">\n<p><em>YAML</em> ドキュメントに <code>@data/values</code> アノテーションをつければ <em>Data Values</em> として宣言したことになる。<br>\nまた、テンプレートファイルから <em>Data Values</em> を参照するには、ファイル先頭に <code>@ load(\"@ytt:data\", \"data\")</code> アノテーションをつける。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 2. Data Values を使う例</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">var_1.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@data/values   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n---\nhoge: hoge value    <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\nfoo:\n  fuga: fugafuga\nbar: old value</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><em>Data Values</em> ファイルの宣言。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>それぞれの値を記述。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">var_2.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@data/values\n---\nbar: new value      <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\n#@overlay/remove    <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\nhoge:\n\n#@overlay/match missing_ok=True     <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\nbaz: add new key</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>既存の値を上書き。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>既存の <em>key</em> を削除。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>新しい <em>key</em> とその値を追加。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">template.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@ load(\"@ytt:data\", \"data\")    <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n---\nvar1: #@ data.values.bar        <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\nvar2: #@ data.values.foo.fuga\nvar3: #@ data.values.foo\nvar4: #@ data.values.baz</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><em>Data Values</em> を読み込み。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>登録した <em>Data Values</em> の各値を参照。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">実行結果</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-output=\"5-10\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template \\   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n  --file template.yml \\\n  --file var_1.yml \\\n  --file var_2.yml\n\nvar1: new value\nvar2: fugafuga\nvar3:\n  fuga: fugafuga\nvar4: add new key</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>テンプレートと使用する <em>Data Values</em> のファイルも一緒に指定する。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-caution\" title=\"Caution\" data-md-icon=\"local_fire_department\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">Data Values のキーについて</div>\nキーは <em>snake_case</em> 形式が推奨（つまり <strong>ハイフン（<code>-</code>）は非推奨</strong>）。<br>\nこれは参照時に <code>.</code> を使った参照ができなくなるため。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">アノテーションのスペースについて</div>\n<div class=\"paragraph\">\n<p><code>#@</code> 後にスペースが必要なものと不要なものがある。<br>\nこれについては、</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><em>YAML</em> 要素に働きかけるアノテーション（<code>@data/values</code> や <code>@overlay/match</code>）には<strong>不要</strong></p>\n</li>\n<li>\n<p>実際は <code>ytt</code> のディレクティブであるもの（<code>@ load</code> や <code>@ if</code>）には<strong>必要</strong></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>ということらしい（<a href=\"https://carvel.dev/ytt/docs/latest/faq/#when-should-i-include-a-space-in-my-ytt-comment-does-it-matter-is-it-load-or&#8212;&#8203;load-overlaymatch-or&#8212;&#8203;overlaymatch\" target=\"_blank\" rel=\"noopener\">詳細</a>）。</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_json_データを利用する\"><a href=\"https://carvel.dev/ytt/docs/latest/faq/#how-do-i-load-json-for-use-as-a-data-value\" target=\"_blank\" rel=\"noopener\"><em>JSON</em> データを利用する</a></h4>\n<div class=\"paragraph\">\n<p>コマンドラインオプションの <code>--data-value-file</code> オプションでファイル内容を文字列として読み込み、それを <em>JSON</em> データとしてオブジェクトに変換すればいい。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 3. JSONファイルを読み込む</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">conf.json</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-json\"\n    data-lang=\"json\">{\n  \"version\": \"1.2.3\",\n  \"levels\": [\"info\", \"warn\", \"error\"]\n}</code></pre>\n  </div>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">template.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@ load(\"@ytt:data\", \"data\")\n#@ load(\"@ytt:json\", \"json\")      <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n#@ load(\"@ytt:struct\", \"struct\")  <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\n---\n#@ config = struct.encode(\\   <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n#@    json.decode(data.values.config)\\  <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n#@  )\njson:\n  version: #@ config.version\n  levels: #@ config.levels</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><em>JSON</em> や <code>struct</code> 型のモジュールを読み込み。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>プロパティを <code>.</code> から参照できるように <code>dict</code> 型の値を <code>struct</code> 型に変換。<br>\n（末尾の <code>\\</code> は <em>Starlark</em> 言語における改行のエスケープ）</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td><code>--data-value-file</code> で読み込んだ <em>JSON</em> ファイルの内容（文字列）を <code>dict</code> 型の値として変換。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">実行結果</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-output=\"4-10\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template \\\n  --file template.yml \\\n  --data-value-file config=conf.json  <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\njson:\n  version: 1.2.3\n  levels:\n  - info\n  - warn\n  - error</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><code>&lt;key&gt;=&lt;/path/to/file&gt;</code> の書式。<br>\n指定した <code>key</code> の値にファイル内容を文字列として読み込む。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data_values_の型定義data_values_schema\"><em>Data Values</em> の型定義（<a href=\"https://carvel.dev/ytt/docs/latest/lang-ref-ytt-schema/\" target=\"_blank\" rel=\"noopener\"><em>Data Values Schema</em></a>）</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/vmware-tanzu/carvel-ytt/releases/tag/v0.35.0\" target=\"_blank\" rel=\"noopener\">version 0.35.0 で正式実装</a>された機能で、<em>Data Values</em> の型定義を宣言する。<br>\n<em>YAML</em> ドキュメントに <code>@data/values-schema</code> アノテーションをつけて宣言する。</p>\n</div>\n<div class=\"paragraph\">\n<p>この <em>Data Values Schema</em> で定義した値はデフォルト値として機能し、 <em>Data Values</em> に定義された値で上書きマージされる。<br>\nよって、</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><em>Data Values Schema</em> による汎用的な型定義を行い、</p>\n</li>\n<li>\n<p>実際に扱う値を <em>Data Values</em> で実装する</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>という形にするのがよさそう。</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>使い所として、</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>複数人による作業</p>\n</li>\n<li>\n<p>同種の <em>YAML</em> 設定ファイルを複数作成するとき</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>などに利用するとよさそう。</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 4. Data Values Schema を使った例</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">config/schema.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@data/values-schema  <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n---\ncache:\n  name: Caching\n  id: cache\n  uses: actions/cache@v2\n  with:\n    path: /tmp/cache\n    key: ${{ runner.os }}-caching-${{ hashFiles('.lock') }}\n    restore-keys: \"\"</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><em>Data Values Schema</em> としての宣言。<br>\nここで定義した値はデフォルト値になる。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">config/data.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@data/values   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n---\ncache:\n  name: Cache Docker Layer\n  with:\n    key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}\n    restore-keys: |\n      ${{ runner.os }}-docker-</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><em>Data Values</em> で定義した値は一緒に読み込んだ <em>Schema</em> の値を上書きする。<br>\n上書きしたいプロパティだけを記述すればOK。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">config/template.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@ load(\"@ytt:data\", \"data\")\n---\nloading: #@ data.values.cache</code></pre>\n  </div>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-user=\"user\"\n    data-host=\"local\"\n    data-output=\"2-30\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template --file=config\n\nloading:\n  name: Cache Docker Layer\n  id: cache\n  uses: actions/cache@v2\n  with:\n    path: /tmp/cache\n    key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}\n    restore-keys: |\n      ${{ runner.os }}-docker-</code></pre>\n  </div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\" data-md-icon=\"emoji_objects\"></i>\n</td>\n<td class=\"content\">\n複数ファイルに分割して <em>Schema</em> を定義する場合は、<em>Overlays</em> の機能（<code>#@overlay/match missing_ok=True</code>）を利用する必要があるので注意。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_schema_の拡張\"><em>Schema</em> の拡張</h4>\n<div class=\"paragraph\">\n<p><em>Schema</em> で定義した型に新しくプロパティを追加したい場合は、</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>その <em>Schema</em> ファイルを修正する</p>\n</li>\n<li>\n<p>別の <em>Schema</em> ファイルを作成して <em>Overlays</em> による上書きをする</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>のどちらかを行う必要がある。<br>\n（横着して <em>Data Values</em> で追加しようとすると怒られる。）</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 5. Overlays を利用して Schema を拡張</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">config/schema.patch.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@data/values-schema\n---\ncache:\n  #@overlay/match missing_ok=True   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n  env:\n    HOGE: \"\"</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><em>Overlays</em> を利用して新しいプロパティを追加する。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">config/data.yml （更新）</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@data/values\n---\ncache:\n  name: Cache add env\n  env:\n    HOGE: hogehoge</code></pre>\n  </div>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-user=\"user\"\n    data-host=\"local\"\n    data-output=\"2-30\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template --file=config\n\nloading:\n  name: Cache add env\n  id: cache\n  uses: actions/cache@v2\n  with:\n    path: /tmp/cache\n    key: ${{ runner.os }}-caching-${{ hashFiles('.lock') }}\n    restore-keys: \"\"\n  env:\n    HOGE: hogehoge</code></pre>\n  </div>\n</div>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\" data-md-icon=\"emoji_objects\"></i>\n</td>\n<td class=\"content\">\nオプショナルなプロパティをもつ型を定義したい場合は <a href=\"https://carvel.dev/ytt/docs/latest/how-to-write-schema/#declaring-pass-through-data-values\" target=\"_blank\" rel=\"noopener\"><code>#@schema/type any=True</code> を利用する方法</a>がある。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_overlays\">パッチの適用（ <a href=\"https://carvel.dev/ytt/docs/latest/ytt-overlays/\" target=\"_blank\" rel=\"noopener\"><em>Overlays</em></a> ）</h3>\n<div class=\"paragraph\">\n<p>テンプレートや <em>Data Values</em> の設定の一部だけを変更したり、共通の設定を適用したりすることができる。<br>\n<em>Overlays</em> として宣言するには、<em>YAML</em> ドキュメントに <code>@overlay/match</code> アノテーションをつける。<br>\nまた <em>Overlays</em> の関数などを使うには、ファイルの先頭で <code>#@ load(\"@ytt:overlay\", \"overlay\")</code> アノテーションを記述しておく。</p>\n</div>\n<div class=\"paragraph\">\n<p><em>Overlays</em> は <em>YAML</em> テンプレートが描画されたあとに適用される。</p>\n</div>\n<div class=\"paragraph\">\n<p>他、<em>Overlays</em> についての詳細はこちらの<a href=\"https://carvel.dev/ytt/docs/latest/lang-ref-ytt-overlay/\" target=\"_blank\" rel=\"noopener\">公式ドキュメント</a>を参照。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 6. Overlaysを使ったパッチ適用例</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">config.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">name: overlay sample\nversion: 1.2.3\nmetadata:\n  - name: example-ingress1\n    tag:\n      - \"hoge\"\n    annotations:\n      message: removed this message\n    overrides:\n      - hoge\n      - foo\n  - name: example2\n    tag:\n      - foo\n    annotations:\n      message: left message\n    overrides:\n      - yoho</code></pre>\n  </div>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">patch.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@ load(\"@ytt:overlay\", \"overlay\")  <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\n#@overlay/match by=overlay.all  <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n---\nmetadata:\n  #@overlay/match by=overlay.subset({\"name\": \"example-ingress1\"})  <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n  - tag:\n      - \"fuga\"\n    annotations:\n      #@overlay/remove    <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n      message:\n    #@overlay/match missing_ok=True   <i class=\"conum\" data-value=\"5\"></i><b>(5)</b>\n    config:\n      var1: hoge\n      var2: fuga\n\n#@overlay/match by=overlay.subset({\"metadata\": []})  <i class=\"conum\" data-value=\"6\"></i><b>(6)</b>\n---\nmetadata:\n  #@overlay/match by=overlay.all, expects=\"1+\"  <i class=\"conum\" data-value=\"7\"></i><b>(7)</b>\n  - overrides:\n      - add value</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><em>Overlays</em> ライブラリを読み込み。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td><em>Overlays</em> 用のドキュメントであることを宣言。<br>\nかつ <em>Overlays</em> を適用する <em>YAML</em> 要素のパターンマッチ方法を指定（<code>by</code>）。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>指定した <em>YAML</em> 要素と一致する要素を上書き対象とする。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>下記のキーを削除する。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"5\"></i><b>5</b></td>\n<td>既存のキーが存在しないときは新しく追加したい場合、<code>missing_ok=True</code> を指定する。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"6\"></i><b>6</b></td>\n<td>詳細な値を指定したくないときは、空の値（<code>[]</code>, <code>{}</code>）を指定すればいい。<br>\nが、こういう場合は <code>overlay.all()</code> を使ったほうがいい。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"7\"></i><b>7</b></td>\n<td><code>expects</code> でマッチすべき回数を指定。この回数に該当しなければエラーとなる。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">実行結果</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-output=\"2-25\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template --file config.yml --file patch.yml\n\nname: overlay sample\nversion: 1.2.3\nmetadata:\n- name: example-ingress1\n  tag:\n  - hoge\n  - fuga\n  annotations: {}\n  overrides:\n  - hoge\n  - foo\n  - add value\n  config:\n    var1: hoge\n    var2: fuga\n- name: example2\n  tag:\n  - foo\n  annotations:\n    message: left message\n  overrides:\n  - yoho\n  - add value</code></pre>\n  </div>\n</div>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\" data-md-icon=\"emoji_objects\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">配列の値の置換について</div>\n配列の値を追加したり空にしたりすることは簡単にできるが、置換することは難しい。<br>\nある程度あきらめたほうがよさそう。\n</td>\n</tr>\n</table>\n</div>\n<table class=\"tableblock frame-all grid-all fit-content\">\n<caption class=\"title\">Table 1. <a href=\"https://carvel.dev/ytt/docs/latest/lang-ref-ytt-overlay/#overlay-annotations\" target=\"_blank\" rel=\"noopener\">Overlays アノテーション</a>（一部）</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">アノテーション</th>\n<th class=\"tableblock halign-left valign-top\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>@overlay/match</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">どの要素を修正・上書きするかを指定する。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>@overlay/match-child-defaults</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>expects</code> や <code>missing_ok</code> の設定値を子要素にデフォルト値としてつける。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>@overlay/remove</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">一致した要素を削除する。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>@overlay/replace</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">一致した要素の値を置換する。</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"tableblock frame-all grid-all fit-content\">\n<caption class=\"title\">Table 2. <a href=\"https://carvel.dev/ytt/docs/latest/lang-ref-ytt-overlay/#overlaymatch\" target=\"_blank\" rel=\"noopener\">Matcher関数</a>（一部）</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">関数</th>\n<th class=\"tableblock halign-left valign-top\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>overlay.all()</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">記述した要素をすべて含む要素を検索する。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>overlay.subset(<em>TARGET</em>)</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code><em>TARGET</em></code> で指定した要素の構造と一致する要素を検索する。</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<code>overlay.map_key(&#8230;&#8203;)</code> は理解が不十分なせいで期待通りの動作をしてくれないことが多かった。<br>\nなので少し冗長でも <code>overlay.subset(&#8230;&#8203;)</code> を使ったほうがイライラせずにすんだ。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_共通の設定項目を定義する\">共通の設定項目を定義する</h4>\n<div class=\"paragraph\">\n<p><code>runs-on</code> とかの共通設定は1回の記述で済ませたい。<br>\nそういう場合にも <em>Overlays</em> が有効。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 7. Overlays で共通設定を定義</div>\n<div class=\"content\">\n<div class=\"paragraph\">\n<p><code>runs-on</code> の値と、ステップの最初に行う <code>uses: actions/checkout@v2</code> を共通化。</p>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">commons-patch.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@ load(\"@ytt:overlay\", \"overlay\")\n\n#@overlay/match by=overlay.all, expects=\"1+\"\n---\njobs:\n  #@overlay/match by=overlay.all, expects=\"1+\"\n  _:  <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n    #@overlay/match missing_ok=True\n    runs-on: ubuntu-20.04\n\n    steps:\n      #@overlay/match by=overlay.index(0)   <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n      #@overlay/insert before=True  <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n      - name: Checkout code\n        uses: actions/checkout@v2</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>任意のキー名としたい場合、<code>_</code> と指定する。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>最初の配列要素を検索。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>上記で検索された要素の前に、この <em>YAML</em> 要素を挿入させる。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>もしあるファイルでは別の設定にしたい場合、それ用の <em>Overlays</em> を設定して上書きさせればいい。</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_template_モジュール\"><a href=\"https://carvel.dev/ytt/docs/latest/lang-ref-ytt-template/\" target=\"_blank\" rel=\"noopener\"><em>Template</em> モジュール</a></h3>\n<div class=\"paragraph\">\n<p>既存の <em>YAML</em> 要素をまるごと置換する <code>template.replace()</code> 関数が利用できる。</p>\n</div>\n<div class=\"paragraph\">\n<p>例として、<em>GitHub Actions ワークフロー</em> においては <code>steps</code> キーが配列を格納するので、ここでよく使いそう。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 8. GitHub Actions ワークフローにおける利用例</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">vars.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@data/values\n---\nsetup:\n  - name: Checkout code\n    uses: actions/checkout@v2\n  - name: Set up QEMU\n    uses: docker/setup-qemu-action@v1\n  - name: Set up Docker Buildx\n    uses: docker/setup-buildx-action@v1</code></pre>\n  </div>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">workflow-template.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@ load(\"@ytt:data\", \"data\")\n#@ load(\"@ytt:template\", \"template\")  <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n---\n...\njobs:\n  docker:\n    name: docker / build\n    runs-on: ubuntu-20.04\n    steps:\n      -  #@ template.replace(data.values.setup)   <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n      - ...</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><em>Template</em> ライブラリを読み込み。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>ここの配列要素を <code>setup</code> の <em>YAML</em> 要素で置換している。<br>\nこれによって二次元配列にならずに済む。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">実行結果</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-output=\"2-16\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template --file workflow-template.yml --file vars.yml\n\n...\njobs:\n  docker:\n    name: docker / build\n    runs-on: ubuntu-20.04\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up QEMU\n      uses: docker/setup-qemu-action@v1\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n    - ...</code></pre>\n  </div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_文字列のテンプレートtext_templating\">文字列のテンプレート（<a href=\"https://carvel.dev/ytt/docs/latest/ytt-text-templating/\" target=\"_blank\" rel=\"noopener\"><em>Text Templating</em></a> ）</h3>\n<div class=\"paragraph\">\n<p><code>#@yaml/text-templated-strings</code> アノテーションをつける。</p>\n</div>\n<div class=\"paragraph\">\n<p>テンプレート文字列（文字列補間）を使いたいときに使う。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 9. テンプレート文字列（文字列補間）</div>\n<div class=\"content\">\n<div class=\"paragraph\">\n<p><code>@yaml/text-templated-strings</code> アノテーションをつけた上で <code>(@</code> と <code>@)</code> で囲んだ部分が変数展開される。</p>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">config.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">#@ val1 = \"value1\"  <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n#@ val2 = \"value2\"\n\n#@yaml/text-templated-strings   <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n---\nnormal: \"val1 is (@= val1 @) and val2 is (@= val2 @)\"   <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\nno_output: \"val1 is (@ val1 @) and val2 is (@ val2 @)\"  <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\ntrim_spaces: \"val1 is (@-= val1 -@) and val2 is (@-= val2 @)\"   <i class=\"conum\" data-value=\"5\"></i><b>(5)</b>\n\nkey_(@= val1 @): used in key    <i class=\"conum\" data-value=\"6\"></i><b>(6)</b></code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>変数を定義。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>テンプレート文字列を使うためのアノテーション。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>通常使用。変数展開された値は<strong>文字列</strong>として扱われる。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td><code>=</code> をつけない場合、変数展開されない。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"5\"></i><b>5</b></td>\n<td><code>-</code> をつけた側のスペースが除去される。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"6\"></i><b>6</b></td>\n<td>キーにも変数展開が使える。</td>\n</tr>\n</table>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">実行結果</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-output=\"2-10\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template --file config.yml\nnormal: val1 is value1 and val2 is value2\nno_output: 'val1 is  and val2 is '\ntrim_spaces: val1 isvalue1and val2 isvalue2\nkey_value1: used in key</code></pre>\n  </div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_コメント\">コメント</h3>\n<div class=\"paragraph\">\n<p><code>#!</code> で始めるとコメントとして使われる。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 10. コメント</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">comment.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">---\n#! This is  comment\nhoge: sample-for-comment</code></pre>\n  </div>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">実行結果</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-output=\"2-10\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">ytt template --file comment.yml\nhoge: sample-for-comment</code></pre>\n  </div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_その他\">その他</h3>\n<div class=\"paragraph\">\n<p><em>Struct</em> とか <em>Library</em> とか if文とか関数とか。</p>\n</div>\n<div class=\"paragraph\">\n<p>詳しくは<a href=\"https://carvel.dev/ytt/docs/latest/\" target=\"_blank\" rel=\"noopener\">公式ドキュメント</a>を参考。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_faq\">🍣FAQ</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_anchoralias_は使えるの\">anchor/alias は使えるの？</h3>\n<div class=\"paragraph\">\n<p>普通に使える。<br>\nその上 <code>ytt</code> で出力された <em>YAML</em> ドキュメントは <em>alias</em> が展開されるので、anchor/alias が使えない <em>GitHub Actions ワークフロー</em> でも安心して利用できる。</p>\n</div>\n<div class=\"paragraph\">\n<p>ただまあ、<code>ytt</code> を使うなら <em>anchor/alias</em> の代わりに<a href=\"https://carvel.dev/ytt/docs/latest/lang-ref-def/\" target=\"_blank\" rel=\"noopener\">関数</a>を利用したほうが筋はいいかも。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_datavalues_で定義した変数を別の_datavalues_から参照したい\"><code>data/values</code> で定義した変数を別の <code>data/values</code> から参照したい</h3>\n<div class=\"paragraph\">\n<p>現状では <code>data/values</code> のファイルが全て読み込まれるまでは参照できないため、無理らしい（<a href=\"https://github.com/vmware-tanzu/carvel-ytt/issues/309\" target=\"_blank\" rel=\"noopener\">issues #309</a>）。</p>\n</div>\n<div class=\"paragraph\">\n<p>なので代わりに <em>Overlays</em> でパッチをあてたり、<em>Library</em> を使って参照したりしてみる。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_on_キーが_true_に変換されてしまう\"><code>on</code> キーが <code>true</code> に変換されてしまう</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://yaml.org/type/bool.html\" target=\"_blank\" rel=\"noopener\"><em>YAML Version 1.1</em> の仕様</a>のせい。<br>\nダブルクォーテーション <code>\"</code> で囲み、文字列として扱わせるといい。</p>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">onキーが true に変換されないようにする</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">\"on\":\n  push: {}</code></pre>\n  </div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_error_use_of_reserved_keyword_with_is_not_allowed\">Error: use of reserved keyword 'with' is not allowed</h3>\n<div class=\"paragraph\">\n<p>ある <em>GitHub Action</em> を <em>Data Value</em> にして参照しようとしたときに発生したエラー。</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">原因</dt>\n<dd>\n<p><em>Starlark</em> の予約語（<a href=\"https://github.com/google/starlark-go/blob/master/doc/spec.md#lexical-elements\" target=\"_blank\" rel=\"noopener\">参照</a>）に <code>with</code> が入っているため、ドット表記（<code>~~.with</code>）による利用はできない。</p>\n</dd>\n<dt class=\"hdlist1\">対策</dt>\n<dd>\n<p>ブラケット表記（<code>~~[\"with\"]</code>）で参照すればいい。</p>\n<div class=\"exampleblock\">\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">✖️NG（ドット表記）</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">action_name: #@ data.values.&lt;value&gt;.with.name</code></pre>\n  </div>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">✔️OK（ブラケット表記）</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">action_name: #@ data.values.&lt;value&gt;[\"with\"].name</code></pre>\n  </div>\n</div>\n</div>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<code>with</code> キーワード以外でもこのエラーは発生するが、同じようにブラケット表記を使えばいい。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_おわりに\">😎おわりに</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code>ytt</code> のサンプルがいまいちわからなかったので実際に試してみたのを書いた。<br>\nただ <em>Overlays</em> はすごい便利なんだけど <code>match</code> 条件が全然わからん。ふんいきで使ってる。</p>\n</div>\n<div class=\"paragraph\">\n<p>なお、作成した <code>ytt</code> 用のテンプレートのままでは <em>GitHub</em> で使えないので、</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><em>Git Hooks</em> で <code>git push</code> 前にコンパイル</p>\n</li>\n<li>\n<p>別の <em>GitHub Actions ワークフロー</em> でコンパイルさせてコミットを追加<sup class=\"footnote\">[<a id=\"_footnoteref_1\" class=\"footnote\" href=\"#_footnotedef_1\" title=\"View footnote.\">1</a>]</sup></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>したりするのがよさそう。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">📖参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://carvel.dev/ytt/\" target=\"_blank\" rel=\"noopener\">Carvel - Carvel - ytt</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/vmware-tanzu/carvel-ytt\" target=\"_blank\" rel=\"noopener\">vmware-tanzu/carvel-ytt: YAML templating tool that works on YAML structure instead of text</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/vmware-tanzu/carvel-community/tree/develop/proposals/ytt/001-schemas\" target=\"_blank\" rel=\"noopener\">carvel-community/proposals/ytt/001-schemas at develop · vmware-tanzu/carvel-community</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"footnotes\">\n<hr>\n<div class=\"footnote\" id=\"_footnotedef_1\">\n<a href=\"#_footnoteref_1\">1</a>. ただし <code>GITHUB_TOKEN</code> には <code>workflows</code> 権限が許可されていないため、個人アクセストークンを利用する必要がある。\n</div>\n</div>","title":"GitHub Actions ワークフローを YAML テンプレートツール（ytt）で楽に生成したい！","created_at":"2021-06-18","tags":["yaml","ytt","github-actions"],"updated_at":"2021-12-06","author":"秋々すすき","revision":"1.2","revision_remark":"ytt v0.37.0 での情報に更新"}