{"filename":"github_actions_service_container.adoc","rendered":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">目次</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_はじめに\">はじめに🤔</a></li>\n<li><a href=\"#_サービスコンテナ\">サービスコンテナ📦</a></li>\n<li><a href=\"#_github_actions_ワークフローで_kroki_コンテナを利用する例\"><em>GitHub Actions</em> ワークフローで <em>Kroki</em> コンテナを利用する例🧾</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_github_actions_ワークフロー\"><em>GitHub Actions</em> ワークフロー</a></li>\n<li><a href=\"#_asciidoc_の例\"><em>Asciidoc</em> の例</a></li>\n</ul>\n</li>\n<li><a href=\"#_おわりに\">おわりに😎</a></li>\n<li><a href=\"#_参考\">参考📖</a></li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_はじめに\">はじめに🤔</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>本ブログは <em>Asciidoc</em> 記法で記事を書いており、その中でダイアグラム図を描画するのに <em><a href=\"https://kroki.io\" target=\"_blank\" rel=\"noopener\">Kroki</a></em> APIサーバーを利用している。<br>\nデフォルト設定では公式のAPIサーバーを利用するので、ブログをビルドするたびに負担をかけるのは申し訳ないなぁ、と思ってなんとかしたかった。</p>\n</div>\n<div class=\"paragraph\">\n<p>そこで <em>GitHub Actions</em> ワークフローで使える<a href=\"https://docs.github.com/ja/actions/guides/about-service-containers\" target=\"_blank\" rel=\"noopener\">サービスコンテナ</a>という機能を利用して、ビルド時に <code>kroki</code> をセルフホストしてみる。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_サービスコンテナ\"><a href=\"https://docs.github.com/ja/actions/guides/about-service-containers\" target=\"_blank\" rel=\"noopener\">サービスコンテナ📦</a></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><em>GitHub Actions</em> ワークフローのジョブ実行時にいっしょに起動させる <em>Docker</em> コンテナのこと。<br>\nテストやビルド時にデータベースやAPIサーバが必要なときに利用する。<br>\n（公式ドキュメントでは <a href=\"https://docs.github.com/ja/actions/guides/creating-redis-service-containers\" target=\"_blank\" rel=\"noopener\">Redis</a> と <a href=\"https://docs.github.com/ja/actions/guides/creating-postgresql-service-containers\" target=\"_blank\" rel=\"noopener\">PostgreSQL</a> のサンプルが紹介されている。）</p>\n</div>\n<div class=\"paragraph\">\n<p>サービスコンテナの定義は以下のように <code>jobs.&lt;job_id&gt;.services</code> キーで定義する。<br>\nなお本記事の例はランナーマシン上での実行を前提としている。</p>\n</div>\n<details>\n<summary class=\"title\">ランナーマシン上って？</summary>\n<div class=\"content\">\n<div class=\"paragraph\">\n<p><em>GitHub Actions</em> ワークフローにおいて、ジョブを実行する環境は用意されている環境から選ぶだけでなく、任意の <em>Docker</em> コンテナ上で実行させることもできる。</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">ランナーマシン or コンテナ 上でのジョブ実行</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 66.6667%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">ジョブを実行する環境</th>\n<th class=\"tableblock halign-left valign-top\">指定方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">ランナーマシン</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>jobs.&lt;job_id&gt;.runs-on</code> で指定。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">コンテナ</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>jobs.&lt;job_id&gt;.container</code> で指定。</p></td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>よってランナーマシン上での実行とは、 <code>jobs.&lt;job_id&gt;.container</code> を使っていないということ。</p>\n</div>\n</div>\n</details>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 1. サービスコンテナの例</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">.github/workflows/service-container.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">jobs:\n  build:\n    runs-on: ubuntu-20.04\n\n    services:   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n      kroki:    <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n        image: yuzutech/kroki   <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n        ports:\n          - 8000:8000   <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n\n    steps:\n      # ...</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>サービスコンテナを定義するキー。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>ここで指定したキーがそのままコンテナ名となる。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>利用する <em>Docker</em> イメージを指定。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td><code>&lt;host&gt;:&lt;container&gt;</code> を書式とするポートマッピング。<br>\nランナーマシン上で実行する場合はアクセスするために必須。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\nランナーマシン上でワークフロー・ジョブを実行する場合、サービスコンテナには <code>http://localhost:&lt;PORT&gt;</code> でアクセスできる。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-caution\" title=\"Caution\" data-md-icon=\"local_fire_department\"></i>\n</td>\n<td class=\"content\">\n<em>GitHub Actions</em> のローカル実行ツール <a href=\"https://github.com/nektos/act\"><code>act</code></a> では、残念ながら現時点（v0.2.20）でこのサービスコンテナに対応できていない。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_github_actions_ワークフローで_kroki_コンテナを利用する例\"><em>GitHub Actions</em> ワークフローで <em>Kroki</em> コンテナを利用する例🧾</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>サービスコンテナを使って <code>kroki</code> を利用する <em>GitHub Actions</em> ワークフローおよび <em>Asciidoc</em> と <em>Javascript</em> の例。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_github_actions_ワークフロー\"><em>GitHub Actions</em> ワークフロー</h3>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<code>kroki</code> の <em>Docker</em> コンテナの記述については<a href=\"https://docs.kroki.io/kroki/setup/install/#_using_docker_compose\" target=\"_blank\" rel=\"noopener\">Kroki公式ドキュメントの docker-compose.yaml</a>を参考。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>ワークフロー全体の例。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 2. サービスコンテナでkrokiを利用するワークフロー</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">.github/workflows/asciidoc.yml</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-yaml\"\n    data-lang=\"yaml\">name: Asciidoc with Kroki\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    services:\n      kroki:  <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n        image: yuzutech/kroki\n        env:\n          KROKI_MERMAID_HOST: mermaid   <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n        ports:\n          - 8000:8000   <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n      mermaid:  <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n        image: yuzutech/kroki-mermaid\n    steps:\n      - name: checkout\n        uses: actions/checkout@v2\n      - name: setup node\n        uses: actions/setup-node@v1\n        with:\n          node-version: '12.x'\n      - name: install packages\n        run: yarn install\n      - name: build\n        run: yarn build</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><code>kroki</code> コンテナの定義を行う。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td><code>Mermaid</code> 記法は別コンテナで提供されるため、この環境変数に <code>mermaid</code> コンテナ名を指定しておく。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>ポートマッピング。<code>kroki</code> コンテナは <code>8000</code> ポートを利用する。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td><code>mermaid</code> コンテナの定義。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_asciidoc_の例\"><em>Asciidoc</em> の例</h3>\n<div class=\"paragraph\">\n<p><code>asciidoctor/core</code> を利用する場合の例。</p>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-important\" title=\"Important\" data-md-icon=\"report\"></i>\n</td>\n<td class=\"content\">\n<em>GitHub Actions</em> ワークフローでは環境変数 <code>GITHUB_ACTIONS</code> が <code>true</code> に設定されているため、それを指標にして条件分岐している。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 3. Asciidoc</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-asciidoc\"\n    data-lang=\"asciidoc\">= サービスコンテナkrokiのテスト\nifdef::env-github[]   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n:kroki-server-url: http://localhost:8000\n:kroki-default-options: inline\nendif::[]\n\n`kroki` Docerコンテナのテスト。\n\n.Mermaid.js\n[mermaid, mermaid.js, svg]\n....\ngantt\n  title サンプル\n\n  section サンプルタスク\n    apple :a, 2017-07-20, 1w\n    banana :crit, b, 2017-07-23, 1d\n    ぶどう :active, c, after b a, 1d\n    オレンジ  : d, after c, 3d\n....</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><code>env-github</code> 属性が設定されていれば <code>kroki</code> はローカルサーバーのものを利用する。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 4. Asciidocを変換するjavascript</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-js\"\n    data-lang=\"js\">/** @type {import('@asciidoctor/core').Asciidoctor} */\nconst asciidoctor = require('@asciidoctor/core')()\nconst kroki = require('asciidoctor-kroki')\nconst { resolve } = require('path')\n\nkroki.register(asciidoctor.Extensions)\n\nconst doc = asciidoctor.convertFile(resolve(__dirname, 'test.adoc'), {\n  safe: 'safe',\n  mkdirs: true,\n  base_dir: __dirname,\n  to_dir: 'dist',\n  attributes: Object.assign(\n    { 'allow-uri-read': true },\n    process.env.GITHUB_ACTIONS != null ? { 'env-github': true } : undefined   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n  ),\n})\n\n// output file\ndoc.convert()</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>環境変数 <code>GITHUB_ACTIONS</code> が設定されていれば、条件分岐用に <code>env-github</code> 属性を設定しておく。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_おわりに\">おわりに😎</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><em>GitHub Actions</em> ワークフローのサービスコンテナを使うことで外部APIサーバーに負担をかけなくてすむようになった。<br>\nついでに外部通信がなくなることでワークフローの実行時間も短縮できた。</p>\n</div>\n<div class=\"paragraph\">\n<p>こういう便利な機能を知らなかったの悔しい😣。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考📖</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<div class=\"title\">GitHub Actions ワークフロー</div>\n<ul>\n<li>\n<p><a href=\"https://docs.github.com/ja/actions/guides/about-service-containers\" target=\"_blank\" rel=\"noopener\">サービスコンテナについて - GitHub Docs</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.github.com/ja/actions/reference/workflow-syntax-for-github-actions#jobsjob_idservices\" target=\"_blank\" rel=\"noopener\">GitHub Actionsのワークフロー構文 - GitHub Docs</a></p>\n</li>\n</ul>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Kroki</div>\n<ul>\n<li>\n<p><a href=\"https://kroki.io\" target=\"_blank\" rel=\"noopener\">Kroki!</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/Mogztter/asciidoctor-kroki\" target=\"_blank\" rel=\"noopener\">Mogztter/asciidoctor-kroki: Asciidoctor.js extension to convert diagrams to images using Kroki!</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","title":"GitHub Actions ワークフローのサービスコンテナ機能を利用してみる","created_at":"2021-03-26","tags":["github","github-actions","kroki"],"updated_at":"2021-03-26","author":"秋々すすき","revision":"1.0"}