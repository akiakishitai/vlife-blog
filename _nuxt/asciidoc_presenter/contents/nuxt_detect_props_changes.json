{"filename":"nuxt_detect_props_changes.adoc","rendered":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">目次</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_はじめに\">はじめに🥯</a></li>\n<li><a href=\"#_nuxtvue_における変更検出の基本\"><em>Nuxt（Vue）</em> における変更検出の基本📝</a></li>\n<li><a href=\"#_props_のオブジェクトデータの変更を検出する\"><code>props</code> のオブジェクトデータの変更を検出する🔍</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_監視プロパティwatchで変更を検出する\">監視プロパティ（<code>watch</code>）で変更を検出する</a></li>\n</ul>\n</li>\n<li><a href=\"#_おわりに\">おわりに😎</a></li>\n<li><a href=\"#_参考\">参考📖</a></li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_はじめに\">はじめに🥯</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>親コンポーネントから渡されたプロパティ（<code>props</code>）のデータが変更されたとき、それを検出してビューを更新したい。</p>\n</div>\n<div class=\"paragraph\">\n<p><code>string</code> 型や <code>number</code> 型のデータならばなんの手間もいらず変更を検出してくれるが、オブジェクトや配列データでは一手間が必要になってくる。<br>\nその一手間について記事にしてみた。</p>\n</div>\n<table class=\"tableblock frame-all grid-all fit-content\">\n<caption class=\"title\">Table 1. 環境</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">App</th>\n<th class=\"tableblock halign-left valign-top\">Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Nuxt.js</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">2.14.12</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_nuxtvue_における変更検出の基本\"><em>Nuxt（Vue）</em> における変更検出の基本📝</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://jp.vuejs.org/v2/guide/reactivity.html\" target=\"_blank\" rel=\"noopener\"><em>Vue</em> 公式のドキュメント</a>に書いてある通り。</p>\n</div>\n<div class=\"paragraph\">\n<p>全てのコンポーネントには対応するウォッチャ（<em>watcher</em>）があり、コンポーネントのデータが変更されると <code>setter</code> がこのウォッチャに通知する。<br>\nそして通知を受け取ったウォッチャからコンポーネントの再描画が行われる。</p>\n</div>\n<div class=\"imageblock kroki\">\n<div class=\"content\">\n<span class=\"alt\">watcher</span>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>このデータ変更を検出させるために注意すべきなのが</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>オブジェクトデータの変更</p>\n</li>\n<li>\n<p>配列データの変更</p>\n</li>\n<li>\n<p>リアクティブなプロパティ</p>\n</li>\n<li>\n<p>DOM操作をしたいとき</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>となる（詳細は<a href=\"https://jp.vuejs.org/v2/guide/reactivity.html\" target=\"_blank\" rel=\"noopener\">公式のドキュメント</a>や参考リンクを参照）。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_props_のオブジェクトデータの変更を検出する\"><code>props</code> のオブジェクトデータの変更を検出する🔍</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>今回つまったのは、親コンポーネントから <code>props</code> オプションで渡されたオブジェクトデータの変更を検出する方法について。</p>\n</div>\n<div class=\"paragraph\">\n<p>検出可能にするには、<a href=\"https://jp.vuejs.org/v2/guide/reactivity.html#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\" target=\"_blank\" rel=\"noopener\">ドキュメント</a>より</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>親コンポーネントにおいてプロパティ値変更に <code>vm.$set</code> インスタンスメソッドを使う</p>\n</li>\n<li>\n<p>親コンポーネントにおいて新しいオブジェクトとして生成し直す</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>という方法が考えられるが、いちいち親コンポーネントで上記のことを気にかけるのが面倒くさい。</p>\n</div>\n<div class=\"paragraph\">\n<p>よって今回は<strong>子コンポーネント</strong>において、<code>watch</code> オプションを使って <code>props</code> のオブジェクトを監視させる。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_監視プロパティwatchで変更を検出する\">監視プロパティ（<code>watch</code>）で変更を検出する</h3>\n<div class=\"paragraph\">\n<p><code>watch</code> オプションで <code>props</code> のデータを監視し、変更に対して反応させる。<br>\n下記の例では <a href=\"https://github.com/nuxt-community/nuxt-property-decorator\" target=\"_blank\" rel=\"noopener\">nuxt-property-decorator</a> ライブラリを利用しているので、代わりに <code>@Watch</code> デコレータを利用している。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 1. オブジェクトのプロパティを監視して変更を検出する</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n\n  <div class=\"content\">\n  <pre class=\"highlight \" data-line=\"13-16\"\n    ><code class=\"language-ts\"\n    data-lang=\"ts\">&lt;script lang=\"ts\"&gt;\nimport { Component, Prop, Vue, Watch } from 'nuxt-property-decorator'\n\n@Component\nexport default class InputSearch extends Vue {\n  /** 入力値 */\n  message = ''\n\n  /** URLクエリパラメータ */\n  @Prop({ required: true, default: {} }) query!: Record&lt;'tags', string&gt;\n\n  /** `query.tags` プロパティの変更を監視 */\n  @Watch('query.tags', { immediate: true })   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b> <i class=\"conum\" data-value=\"2\"></i><b>(2)</b> <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n  onUpdateQueryTags() {   <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n    this.message = this.query.tags?.toString() ?? ''\n  }\n}\n&lt;/script&gt;</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><code>watch</code> オプションの代わりに <code>@Watch</code> デコレータを利用。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>オブジェクトのプロパティを指定（ここでは <code>query</code> オブジェクトの <code>tags</code> プロパティ）して監視。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td><em>Vue</em> インスタンスの初期化時にも処理を実行したいので <code>immediate</code> オプションを有効化。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>変更を検出したときに実行する処理を定義。</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\" data-md-icon=\"emoji_objects\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>オブジェクトのネストされているプロパティ全てを監視したい場合は <code>deep</code> オプションを有効化する。</p>\n</div>\n<div \n    class=\"listingblock\">\n\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-ts\"\n    data-lang=\"ts\">@Watch('query', { immediate: true, deep: true })</code></pre>\n  </div>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_おわりに\">おわりに😎</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>うっかりやらかす度合いが高そうなので、備忘録代わりに記事にしてみた。</p>\n</div>\n<div class=\"paragraph\">\n<p><code>props</code> でオブジェクトそのまま渡すのは落とし穴ができやすくて怖いなーって思ったり。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考📖</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<div class=\"title\">Vue.js</div>\n<ul>\n<li>\n<p><a href=\"https://jp.vuejs.org/v2/guide/reactivity.html\" target=\"_blank\" rel=\"noopener\">リアクティブの探求 — Vue.js</a></p>\n</li>\n<li>\n<p><a href=\"https://jp.vuejs.org/v2/guide/computed.html\" target=\"_blank\" rel=\"noopener\">算出プロパティとウォッチャ — Vue.js</a></p>\n</li>\n</ul>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">nuxt-property-decorator</div>\n<ul>\n<li>\n<p><a href=\"https://github.com/nuxt-community/nuxt-property-decorator\" target=\"_blank\" rel=\"noopener\">nuxt-community/nuxt-property-decorator: Property decorators for Nuxt (base on vue-property-decorator)</a></p>\n</li>\n</ul>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">ビュー更新について</div>\n<ul>\n<li>\n<p><a href=\"++https://qiita.com/_Keitaro_/items/8e3f8448d1a0fe281648++\" target=\"_blank\" rel=\"noopener\">$watchでオブジェクトの変更を監視する方法 - Qiita</a></p>\n</li>\n<li>\n<p><a href=\"https://qiita.com/bobu_web/items/ec5a98d03758d12ad721\" target=\"_blank\" rel=\"noopener\">Vue.jsでビューの変更がされないときに疑うこと+主な解決策方法 - Qiita</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","title":"Nuxtで親コンポーネントから渡されるプロパティ（props）の変更を検出する","created_at":"2021-04-02","tags":["nuxt.js"],"updated_at":"2021-04-02","author":"秋々すすき","revision":"1.0"}