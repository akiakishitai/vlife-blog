{
  "filename": "typescript_type_guard_function.adoc",
  "rendered": [
    "<div id=\"toc\" class=\"toc\">",
    "<div id=\"toctitle\">目次</div>",
    "<ul class=\"sectlevel1\">",
    "<li><a href=\"#_はじめに\">🍩はじめに</a></li>",
    "<li><a href=\"#_type_guard_function\">🏰型ガード関数（<em>type guard function</em>）</a></li>",
    "<li><a href=\"#_アサーション関数assertion_function\">🚨アサーション関数（<em>assertion function</em>）</a></li>",
    "<li><a href=\"#_トラブルシューティング\">🛠️トラブルシューティング</a>",
    "<ul class=\"sectlevel2\">",
    "<li><a href=\"#_assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation\">Assertions require every name in the call target to be declared with an explicit type annotation.</a></li>",
    "</ul>",
    "</li>",
    "<li><a href=\"#_参考\">📖参考</a></li>",
    "</ul>",
    "</div>",
    "<div class=\"sect1\">",
    "<h2 id=\"_はじめに\">🍩はじめに</h2>",
    "<div class=\"sectionbody\">",
    "<div class=\"paragraph\">",
    "<p>プログラム書いてるときに「この変数は〇〇なのに <em>TypeScript</em> さんがいい加減に推論してくれない……」ってなることがある。<br>",
    "<code>null</code> じゃないのは分かってるのにとか、<code>Union</code> 型の一部なのは分かってるのにとか。</p>",
    "</div>",
    "<div class=\"paragraph\">",
    "<p>そういうときは <code>any</code> 型にしたり <code>as</code> で強制型変換したりで誤魔化すことが多いんだけど、それらよりはユーザー定義の型ガード関数を使っていこうという話。</p>",
    "</div>",
    "<div class=\"admonitionblock warning\">",
    "<table>",
    "<tr>",
    "<td class=\"icon\">",
    "<i class=\"fa icon-warning\" title=\"Warning\" data-md-icon=\"warning\"></i>",
    "</td>",
    "<td class=\"content\">",
    "<div class=\"title\">使用上の注意</div>",
    "<div class=\"paragraph\">",
    "<p>型ガード関数の正しさは <strong><em>TypeScript</em> さんが保証してくれない</strong>ため、間違ったコードで型を簡単に偽装できてしまう。<br>",
    "つまり、型ガード関数が安全かどうかはコードを書いた人の責任！</p>",
    "</div>",
    "</td>",
    "</tr>",
    "</table>",
    "</div>",
    "<table class=\"tableblock frame-all grid-all fit-content\">",
    "<caption class=\"title\">Table 1. 環境</caption>",
    "<colgroup>",
    "<col>",
    "<col>",
    "</colgroup>",
    "<thead>",
    "<tr>",
    "<th class=\"tableblock halign-center valign-top\">App</th>",
    "<th class=\"tableblock halign-center valign-top\">Version</th>",
    "</tr>",
    "</thead>",
    "<tbody>",
    "<tr>",
    "<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><strong>TypeScript</strong></p></td>",
    "<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">4.9.5</p></td>",
    "</tr>",
    "<tr>",
    "<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><strong><a href=\"https://www.typescriptlang.org/ja/play?ts=4.9.5\" target=\"_blank\" rel=\"noopener\">TypeScript Plyaground</a></strong></p></td>",
    "<td class=\"tableblock halign-left valign-top\"></td>",
    "</tr>",
    "</tbody>",
    "</table>",
    "</div>",
    "</div>",
    "<div class=\"sect1\">",
    "<h2 id=\"_type_guard_function\">🏰型ガード関数（<em>type guard function</em>）</h2>",
    "<div class=\"sectionbody\">",
    "<div class=\"paragraph\">",
    "<p>ユーザー定義の型ガード関数とも呼ばれる、戻り値の型指定が <code>x is T</code> になっている<sup class=\"footnote\">[<a id=\"_footnoteref_1\" class=\"footnote\" href=\"#_footnotedef_1\" title=\"View footnote.\">1</a>]</sup>やつ。<br>",
    "実際に返す値は <em>boolean</em> 値であり、<code>if</code> 文の条件式に使って型を絞り込む。</p>",
    "</div>",
    "<div class=\"exampleblock\">",
    "<div class=\"title\">Example 1. ユーザー定義の型ガード関数例</div>",
    "<div class=\"content\">",
    "<div ",
    "    class=\"listingblock\">",
    "<div class=\"title\">ユーザー定義の型ガード関数の宣言</div>",
    "  <div class=\"content\">",
    "  <pre class=\"highlight \" ><code class=\"language-typescript\"",
    "    data-lang=\"typescript\">// type Hoge = { hoge: string }",
    "function isHoge(value: unknown): value is Hoge {",
    "  if (typeof value !== 'object' || value == null) {",
    "    return false",
    "  }",
    "",
    "  return 'hoge' in value &amp;&amp; typeof value.hoge === 'string'",
    "}</code></pre>",
    "  </div>",
    "</div>",
    "<div ",
    "    class=\"listingblock\">",
    "<div class=\"title\">使用例</div>",
    "  <div class=\"content\">",
    "  <pre class=\"highlight \" ><code class=\"language-typescript\"",
    "    data-lang=\"typescript\">const test1 = (x: unknown) =&gt; {",
    "  if (isHoge(x)) {",
    "    // Hoge 型に絞り込めたのでプロパティにアクセスできる",
    "    console.log(x.hoge)",
    "  } else {",
    "    console.warn(`x is not Hoge.`)",
    "  }",
    "}",
    "",
    "test1({ hoge: 'hogehoge' }) // -&gt; 'hogehoge'",
    "test1({ hoge: 'success', foo: 'not display' }) // -&gt; 'success'",
    "test1(12) // -&gt; x is not Hoge.",
    "test1({ bar: 'bar' }) // -&gt; x is not Hoge.</code></pre>",
    "  </div>",
    "</div>",
    "</div>",
    "</div>",
    "<div class=\"admonitionblock note\">",
    "<table>",
    "<tr>",
    "<td class=\"icon\">",
    "<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>",
    "</td>",
    "<td class=\"content\">",
    "<div class=\"title\">unknown 型</div>",
    "<div class=\"paragraph\">",
    "<p><code>unknown</code> は<strong>型安全な <em>any</em> 型</strong> とも呼ばれ、他の型への代入やプロパティへのアクセスができない不明な型として扱われる。<br>",
    "これによってコンパイル時に誤ったプロパティへのアクセスに気づけるようになる。</p>",
    "</div>",
    "<div class=\"paragraph\">",
    "<p><code>unknown</code> 型の変数は型ガードで型を絞り込んでから利用する。</p>",
    "</div>",
    "<div class=\"paragraph text-right\">",
    "<p>📘 <a href=\"https://typescriptbook.jp/reference/statements/unknown\" target=\"_blank\" rel=\"noopener\">unknown型 | TypeScript入門『サバイバルTypeScript』</a></p>",
    "</div>",
    "</td>",
    "</tr>",
    "</table>",
    "</div>",
    "</div>",
    "</div>",
    "<div class=\"sect1\">",
    "<h2 id=\"_アサーション関数assertion_function\">🚨アサーション関数（<em>assertion function</em>）</h2>",
    "<div class=\"sectionbody\">",
    "<div class=\"paragraph\">",
    "<p>戻り値の型指定が <code>asserts x is T</code> の形になっているやつ。<br>",
    "<a href=\"#_type_guard_function\">上記の型ガード関数</a>とは違い、例外が発生するか否かで判定される。<br>",
    "正常終了すれば以降のコードブロック内において型が絞り込まれる。</p>",
    "</div>",
    "<div class=\"paragraph\">",
    "<p>例外が発生するため、もともとエラーハンドリングを行っているコードやテストコード内でよく使われる。</p>",
    "</div>",
    "<div class=\"exampleblock\">",
    "<div class=\"title\">Example 2. アサーション関数の例</div>",
    "<div class=\"content\">",
    "<div ",
    "    class=\"listingblock\">",
    "<div class=\"title\">アサーション関数の宣言</div>",
    "  <div class=\"content\">",
    "  <pre class=\"highlight \" ><code class=\"language-typescript\"",
    "    data-lang=\"typescript\">// type Hoge = { hoge: string }",
    "function assertHoge(value: unknown): asserts value is Hoge {",
    "  if (typeof value !== 'object' || value == null) {",
    "    throw new Error(`\"${value}\" is not Hoge type.`)",
    "  }",
    "",
    "  if (!('hoge' in value &amp;&amp; typeof value.hoge === 'string')) {",
    "    throw new Error(`\"${value}\" does not have a hoge property.`)",
    "  }",
    "}</code></pre>",
    "  </div>",
    "</div>",
    "<div ",
    "    class=\"listingblock\">",
    "<div class=\"title\">使用例</div>",
    "  <div class=\"content\">",
    "  <pre class=\"highlight \" ><code class=\"language-typescript\"",
    "    data-lang=\"typescript\">const test2 = (x: unknown) =&gt; {",
    "  assertHoge(x)",
    "  // Hoge 型に絞り込めたのでプロパティにアクセスできる",
    "  console.log(x.hoge)",
    "}",
    "",
    "test2({ hoge: 'hogehoge' }) // -&gt; 'hogehoge'",
    "test2({ hoge: 'success', foo: 'not display' }) // -&gt; 'success'",
    "test2(12) // -&gt; Error!",
    "test2({ bar: 'bar' }) // -&gt; Error!</code></pre>",
    "  </div>",
    "</div>",
    "</div>",
    "</div>",
    "<div class=\"admonitionblock note\">",
    "<table>",
    "<tr>",
    "<td class=\"icon\">",
    "<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>",
    "</td>",
    "<td class=\"content\">",
    "<div class=\"title\">assert モジュール</div>",
    "<div class=\"paragraph\">",
    "<p><code>node</code> 環境下では <code>assert</code> モジュールが用意されており、<em>Null</em> チェックや文字列パターンなどの簡単な検証であればわざわざアサーション関数を宣言しなくてもいい。</p>",
    "</div>",
    "<div class=\"paragraph\">",
    "<p>本番環境に向けては <a href=\"https://github.com/unassert-js/unassert\" target=\"_blank\" rel=\"noopener\">unassert</a> で <code>assert</code> 文を削除するのがいいっぽい。</p>",
    "</div>",
    "<div class=\"paragraph text-right\">",
    "<p>📘 <a href=\"https://qiita.com/macinjoke/items/21e5e74a7f1ab6ca60f7\" target=\"_blank\" rel=\"noopener\">これからのTypeScriptはassertをガンガン使おう - Qiita</a></p>",
    "</div>",
    "</td>",
    "</tr>",
    "</table>",
    "</div>",
    "</div>",
    "</div>",
    "<div class=\"sect1\">",
    "<h2 id=\"_トラブルシューティング\">🛠️トラブルシューティング</h2>",
    "<div class=\"sectionbody\">",
    "<div class=\"sect2\">",
    "<h3 id=\"_assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation\">Assertions require every name in the call target to be declared with an explicit type annotation.</h3>",
    "<div class=\"paragraph\">",
    "<p>アサーション関数をアロー関数で定義してしまっているのが原因。<br>",
    "詳細は以下の記事通り。<br>",
    "📘 <a href=\"https://qiita.com/suin/items/e226c42a19e1ddd39d05\" target=\"_blank\" rel=\"noopener\">この直し方→Assertions require every name in the call target to be declared with an explicit type annotation. - Qiita</a></p>",
    "</div>",
    "</div>",
    "</div>",
    "</div>",
    "<div class=\"sect1\">",
    "<h2 id=\"_参考\">📖参考</h2>",
    "<div class=\"sectionbody\">",
    "<div class=\"ulist\">",
    "<div class=\"title\">型ガード関数</div>",
    "<ul>",
    "<li>",
    "<p><a href=\"https://typescriptbook.jp/reference/functions/type-guard-functions\" target=\"_blank\" rel=\"noopener\">型ガード関数 (type guard function) | TypeScript入門『サバイバルTypeScript』</a></p>",
    "</li>",
    "</ul>",
    "</div>",
    "<div class=\"ulist\">",
    "<div class=\"title\">アサーション関数</div>",
    "<ul>",
    "<li>",
    "<p><a href=\"https://typescriptbook.jp/reference/functions/assertion-functions\" target=\"_blank\" rel=\"noopener\">アサーション関数 (assertion functions) | TypeScript入門『サバイバルTypeScript』</a></p>",
    "</li>",
    "<li>",
    "<p><a href=\"https://qiita.com/uhyo/items/b8d2ea6fbf6214fc4194#asserts%E3%81%AE%E4%BD%BF%E3%81%84%E9%81%93\" target=\"_blank\" rel=\"noopener\">TypeScript 3.7の`asserts x is T`型はどのように危険なのか - Qiita</a></p>",
    "</li>",
    "</ul>",
    "</div>",
    "</div>",
    "</div>",
    "<div id=\"footnotes\">",
    "<hr>",
    "<div class=\"footnote\" id=\"_footnotedef_1\">",
    "<a href=\"#_footnoteref_1\">1</a>. <em>type predicate</em>",
    "</div>",
    "</div>"
  ],
  "title": "【TypeScript】ユーザー定義の型ガード関数で型を絞り込もう",
  "created_at": "2023-04-04",
  "tags": [
    "typescript",
    "assert",
    "type-guard"
  ],
  "updated_at": "2023-04-04",
  "author": "秋々すすき",
  "revision": "1.0"
}