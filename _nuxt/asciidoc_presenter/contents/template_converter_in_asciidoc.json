{"filename":"template_converter_in_asciidoc.adoc","rendered":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">目次</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_動機\">動機🤔</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_本記事でやったこと\">本記事でやったこと</a></li>\n</ul>\n</li>\n<li><a href=\"#_テンプレート\">テンプレート🥪</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_jsテンプレートエンジン\">JSテンプレートエンジン</a></li>\n<li><a href=\"#_テンプレートの作成\">テンプレートの作成</a></li>\n</ul>\n</li>\n<li><a href=\"#_テンプレートを適用して出力\">テンプレートを適用して出力💻</a></li>\n<li><a href=\"#_おわりに\">おわりに😎</a></li>\n<li><a href=\"#_参考\">参考📖</a></li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_動機\">動機🤔</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><em>AsciiDoc</em> で <code>prism.js</code> の <a href=\"https://prismjs.com/plugins/command-line/\" target=\"_blank\" rel=\"noopener\">Command Line プラグイン</a> を使ってみたかった。<br>\n上記プラグインではカスタムデータ属性の指定が必要だが、標準の <code>Asciidoctor.js</code> では任意のカスタムデータ属性に対応していない。</p>\n</div>\n<div class=\"paragraph\">\n<p>よって、<a href=\"https://asciidoctor-docs.netlify.app/asciidoctor.js/3.0/extend/converter/template-converter/\" target=\"_blank\" rel=\"noopener\">テンプレートコンバーター</a>を使ってカスタムデータ属性に対応したHTML出力をさせてみる。</p>\n</div>\n<div class=\"paragraph\">\n<p>……やってみた結果としては、<a href=\"https://asciidoctor-docs.netlify.app/asciidoctor.js/current/extend/converter/custom-converter/\" target=\"_blank\" rel=\"noopener\">カスタムコンバーター</a>を使うほうがよさそうだった🥺。</p>\n</div>\n<table class=\"tableblock frame-all grid-all fit-content\">\n<caption class=\"title\">Table 1. 開発環境</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">ツール</th>\n<th class=\"tableblock halign-left valign-top\">バージョン</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Node</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">12.19.0</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">@asciidoctor/core</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">2.2.0</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"sect2\">\n<h3 id=\"_本記事でやったこと\">本記事でやったこと</h3>\n<div class=\"imageblock kroki\">\n<div class=\"content\">\n<span class=\"alt\">AsciidocTemplate</span>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<em>JavaScript</em> の関数でもテンプレート作成できるが、今回は割愛。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_テンプレート\">テンプレート🥪</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>HTMLコードを生成するJSテンプレートエンジン用のソースファイルを指す。<br>\n<code>asciidoctor.js</code> の各ノード（<em>paragraph</em> ブロックとか <em>table</em> ブロックとか）ごとのHTML出力を、このテンプレートから生成されるHTMLコードで置き換える。</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><span class=\"flex items-center text-green-500\"><span class=\"material-icons\">check</span>メリット</span></dt>\n<dd>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>各ノードの出力をファイル単位で独立して記述できるので、上書きしたいノードに対してのみテンプレートを作成すればよい</p>\n</li>\n<li>\n<p>適用するファイルまたはディレクトリを変更するだけでHTML出力を変更できる</p>\n</li>\n</ul>\n</div>\n</dd>\n<dt class=\"hdlist1\"><span class=\"flex items-center text-red-500\"><span class=\"material-icons\">close</span>デメリット</span></dt>\n<dd>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>テンプレートエンジンの使い方を学習する必要がある</p>\n</li>\n<li>\n<p>ブラウザ環境では使えない（はず）</p>\n</li>\n</ul>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_jsテンプレートエンジン\">JSテンプレートエンジン</h3>\n<div class=\"paragraph\">\n<p><code>Asciidoctor.js</code> がサポートするテンプレートエンジンには <code>pug</code> や <code>EJS</code> など<a href=\"https://asciidoctor-docs.netlify.app/asciidoctor.js/3.0/extend/converter/template-converter/#built-in-template-engines\" target=\"_blank\" rel=\"noopener\">いくつかある</a>。<br>\n今回はそのうちの <a href=\"https://mozilla.github.io/nunjucks/\" target=\"_blank\" rel=\"noopener\">nunjucks</a> を使ってみた。</p>\n</div>\n<div \n    class=\"listingblock command-line no-line-numbers\">\n<div class=\"title\">nunjucksインストール</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-user=\"user\"\n    data-host=\"local\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">yarn add nunjucks</code></pre>\n  </div>\n</div>\n<div class=\"paragraph\">\n<p>ライブラリをインストールすれば、あとは自動的に <code>Asciidoctor.js</code> の方で読み込まれる。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_テンプレートの作成\">テンプレートの作成</h3>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>テンプレートを配置するディレクトリを作成（出力時に <code>template_dirs</code> で指定）</p>\n</li>\n<li>\n<p><strong>置き換えたいノード名と一致する名前でファイル作成</strong><br>\nノード名の一覧は <a href=\"https://asciidoctor-docs.netlify.app/asciidoctor.js/3.0/extend/converter/template-converter/#naming-convention\">こちら</a> を参照。</p>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\nたとえば置き換えたいノード名が <code>listing</code> ならば、作成するテンプレートは <code>listing.njk</code> というように同じ名前にする。\n</td>\n</tr>\n</table>\n</div>\n</li>\n<li>\n<p>テンプレートのコードを書く</p>\n</li>\n</ol>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>ノード名とテンプレート名を同じにすることだけ注意すれば、あとはがんばってテンプレートを書くだけ。</p>\n</div>\n<div class=\"paragraph\">\n<p>以下はその一例で、<code>prism.js</code> の <em>Command Line</em> プラグインに対応させるためにカスタムデータ属性の出力などを行っている。</p>\n</div>\n<details>\n<summary class=\"title\">テンプレートのサンプル</summary>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">listing.njk</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-markup\"\n    data-lang=\"markup\">{%- import \"macros/sourcecode.njk\" as func -%}\n\n&lt;div {{ func.roles(node) }}&gt;\n{% if node.getTitle() -%}\n  &lt;div class=\"title\"&gt;{{ node.getTitle() }}&lt;/div&gt;\n{%- endif %}\n  &lt;div class=\"content\"&gt;\n  {% if node.getStyle() === 'source' -%}\n    &lt;pre class=\"highlight {{ 'command-line' if node.getRoles().includes('command-line') -}}\" {{ func.customdata(node.getAttributes()) }}&gt;&lt;code {{ func.language(node) }}&gt;{{ node.getContent() | safe }}&lt;/code&gt;&lt;/pre&gt;\n  {% else -%}\n    &lt;pre {{- func.customdata(node.getAttributes()) }}&gt;{{ node.getContent() | safe }}&lt;/pre&gt;\n  {%- endif -%}\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n  </div>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">macros/sourcecode.njk (マクロ用ソース)</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-markup\"\n    data-lang=\"markup\">{# set id and class attributes #}\n{%- macro roles(node) -%}\n  {% if node.getId() -%}\n    id=\"{{ node.getId() }}\"\n  {%- endif %}\n    class=\"{{ ['listingblock', node.getRole()] | join(' ') | trim }}\"\n{%- endmacro -%}\n\n{# &lt;code&gt; language class and attribute #}\n{%- macro language(node) -%}\n  {%- set lang = node.getAttribute('language') -%}\n  {%- if lang -%}\n    class=\"language-{{ lang }}\"\n    data-lang=\"{{ lang }}\"\n  {%- endif -%}\n{%- endmacro -%}\n\n{# custom data attributes #}\n{% macro customdata(attrs) -%}\n  {%- set regExp = r/^data-.*/ -%}\n  {% for key, value in attrs -%}\n    {% if regExp.test(key) -%}\n      {{ key }}=\"{{ value }}\"\n    {% endif %}\n  {%- endfor %}\n{%- endmacro %}</code></pre>\n  </div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">safe フィルター</div>\n<code>nunjucks</code> では文字列を自動エスケープするが、エスケープ処理は <code>asciidoctor</code> で行いたいので停止しておく。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</details>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\" data-md-icon=\"emoji_objects\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">node オブジェクト</div>\nテンプレートには <a href=\"https://asciidoctor.github.io/asciidoctor.js/master/#abstractnode\" target=\"_blank\" rel=\"noopener\">AbstractNode</a> 型の <code>node</code> オブジェクトが引数として渡される。<br>\nテンプレート内ではこの <code>node</code> からノードのクラスや属性、テキストなどを参照する。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_テンプレートを適用して出力\">テンプレートを適用して出力💻</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>CLIまたはAPIにおいて、先ほど作成したテンプレートファイルのあるディレクトリを <code>template_dirs</code> オプションで指定して呼び出す。</p>\n</div>\n<div \n    class=\"listingblock\">\n<div class=\"title\">main.ts</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-ts\"\n    data-lang=\"ts\">import Processor from '@asciidoctor/core'\n\nconst processor = Processor()\nconst doc = processor.loadFile(\n  'path/to/adoc_file', { template_dirs: ['path/to/template/dir'] })\n\nconsole.log(doc.convert())</code></pre>\n  </div>\n</div>\n<div class=\"imageblock kroki\">\n<div class=\"content\">\n<span class=\"alt\">templateフローチャート</span>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_おわりに\">おわりに😎</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>テンプレートコンバーターの使い方についてあまり情報がなくて戦々恐々としてたけど、やってみたら簡単だった。</p>\n</div>\n<div class=\"paragraph\">\n<p>ただテンプレートエンジンの使い方も学習する必要があるのが難点。<br>\n<em>JavaScript</em> コードで完結する<a href=\"https://asciidoctor-docs.netlify.app/asciidoctor.js/current/extend/converter/custom-converter/\" target=\"_blank\" rel=\"noopener\">カスタムコンバーター</a>のほうを使ったほうがいいかもしれない。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考📖</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://asciidoctor-docs.netlify.app/asciidoctor.js/3.0/extend/converter/template-converter/\" target=\"_blank\" rel=\"noopener\">Template Converter | The Docks @ Asciidoctor</a></p>\n</li>\n<li>\n<p><a href=\"https://mozilla.github.io/nunjucks/getting-started.html\" target=\"_blank\" rel=\"noopener\">Nunjucks</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","title":"AsciiDoc のテンプレートコンバーターを使ってHTML出力をカスタマイズする","created_at":"2020-11-28","tags":["asciidoc","asciidoctor.js","nunjucks"],"updated_at":"2020-11-28","author":"秋々すすき","revision":"1.0"}