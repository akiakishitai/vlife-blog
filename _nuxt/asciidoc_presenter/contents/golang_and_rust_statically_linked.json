{"filename":"golang_and_rust_statically_linked.adoc","rendered":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">目次</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_動機\">🪓動機</a></li>\n<li><a href=\"#_コマンドライン\">⚙️コマンドライン</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_go_言語\">Go 言語</a></li>\n<li><a href=\"#_rust_言語\">Rust 言語</a></li>\n</ul>\n</li>\n<li><a href=\"#_dockerfile_マルチステージでの利用例\">🐳 <em>Dockerfile</em> マルチステージでの利用例</a></li>\n<li><a href=\"#_参考\">📖参考</a></li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_動機\">🪓動機</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>たとえば <em>Alpine</em> でビルドしたのち、他の <em>Linux</em> でも実行できるように静的リンクでビルドさせたい。</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<caption class=\"title\">Table 1. 実行環境</caption>\n<colgroup>\n<col style=\"width: 50%;\">\n<col style=\"width: 50%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Tool</th>\n<th class=\"tableblock halign-left valign-top\">Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><em>go</em></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">1.16.5</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><em>rustup</em></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">1.24.3</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><em>rustc</em></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">1.53.0</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><em>cargo</em></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">1.53.0</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_コマンドライン\">⚙️コマンドライン</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_go_言語\">Go 言語</h3>\n<div class=\"paragraph\">\n<p><em>C</em> 言語コードを呼び出す <em>cgo</em> を使っていると動的リンクされるらしい。<br>\nよって <em>cgo</em> を無効化したり、リンカーに静的リンクするオプションを渡したりする。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 1. Go</div>\n<div class=\"content\">\n<div \n    class=\"listingblock no-line-numbers command-line\">\n\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-user=\"user\"\n    data-host=\"local\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">export CGO_ENABLED=0    <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\ngo build -ldflags '-extldflags=-static'   <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\nstrip /path/to/binary   <i class=\"conum\" data-value=\"3\"></i><b>(3)</b></code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><em>C</em> 言語コードを利用してない場合は <code>cgo</code> を無効化するだけで静的リンクになる。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>リンカーに静的リンクであることを伝えてビルド。<br>\n利用しているパッケージによっては <code>-tags</code> オプションも使って <code>cgo</code> 部分をスキップする。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>デバッグに用いられるシンボル情報を削除してサイズ縮小。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_rust_言語\">Rust 言語</h3>\n<div class=\"paragraph\">\n<p><code>*-musl</code> ターゲットを使用すれば静的リンクになる。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 2. Rust</div>\n<div class=\"content\">\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">x86_64 アーキテクチャの場合</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-user=\"user\"\n    data-host=\"local\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">rustup target add x86_64-unknown-linux-musl   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\ncargo build --release --target x86_64-unknown-linux-musl  <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\nstrip /path/to/binary   <i class=\"conum\" data-value=\"3\"></i><b>(3)</b></code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><code>musl</code> ライブラリを利用するターゲットを追加。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>静的リンクでビルドするには <code>musl</code> ターゲットを使う。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>デバッグに用いられるシンボル情報を削除してサイズ縮小。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<hr>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">静的リンクの確認</div>\n<div class=\"paragraph\">\n<p><code>file</code> コマンドや <code>ldd</code> コマンドを使って確認する。</p>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-user=\"user\"\n    data-host=\"local\"\n    data-output=\"2-10\"\n    ><code class=\"language-bash\"\n    data-lang=\"bash\">file path/to/static/binary | tr , '\\n'\npath/to/static/binary: ELF 64-bit LSB executable\n x86-64\n version 1 (SYSV)\n statically linked\n Go BuildID=abc...\n not stripped</code></pre>\n  </div>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_dockerfile_マルチステージでの利用例\">🐳 <em>Dockerfile</em> マルチステージでの利用例</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>もともとは <em>Dockerfile</em> でビルドさせたかったので、そのサンプル。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 3. Go in dockerfile</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-dockerfile\"\n    data-lang=\"dockerfile\">FROM golang:1.16-alpine AS build-go\nWORKDIR /go/src\n\nRUN \\\n  apk --no-cache add \\  <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n    git \\\n    binutils\n\n### Install to '/go/bin' as static binary\nENV CGO_ENABLED=0\nARG GO_INSTALL=\"go install -ldflags '-extldflags=-static'\"  <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n# ghq\nRUN ${GO_INSTALL} github.com/x-motemen/ghq@v1.2.1\n\n# stripped\nWORKDIR /go/bin\nRUN strip $(ls)\n\n# -----------------------\nFROM debian:buster-slim\nCOPY --from=build-go /go/bin /usr/local/bin/\nRUN ...</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>必要なパッケージ<sup class=\"footnote\">[<a id=\"_footnoteref_1\" class=\"footnote\" href=\"#_footnotedef_1\" title=\"View footnote.\">1</a>]</sup>をインストール。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>リモートリポジトリのパッケージをビルドするため、 <code>go build</code> の代わりに <code>go install</code> を利用。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 4. Rust in dockerfile</div>\n<div class=\"content\">\n<div class=\"paragraph\">\n<p><code>*-unknown-linux-musl</code> ターゲットを追加して利用することで、静的リンクにできる。</p>\n</div>\n<div \n    class=\"listingblock\">\n\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-dockerfile\"\n    data-lang=\"dockerfile\">FROM rust:1.53-alpine AS build-rust\n\nENV CARGO_HOME=/cargo\nWORKDIR ${CARGO_HOME}/bin\n\nRUN apk --no-cache add musl-dev   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\n# Install\nRUN \\\n  cargo install --version ^0.10.1 exa &amp;&amp; \\  <i class=\"conum\" data-value=\"2\"></i><b>(2)</b> <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n  cargo install --version ^2.1.0 git-interactive-rebase-tool\n\n# Reduce binary size\nRUN strip $(ls)\n\n# -----------------------\nFROM debian:buster-slim\nCOPY --from=build-rust /cargo/bin /usr/local/bin/\nRUN ...</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>ビルドするのに必要な <code>musl-dev</code> パッケージをインストール。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td><em>Alpine</em> ベースではデフォルトが <code>musl</code> ターゲットなので、ターゲットを追加・指定する必要がない。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td><a href=\"https://crates.io\" target=\"_blank\" rel=\"noopener\">crates.io</a> に登録されているクレートをビルドするため、 <code>cargo install</code> を利用している。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">📖参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<div class=\"title\">Go</div>\n<ul>\n<li>\n<p><a href=\"https://christina04.hatenablog.com/entry/installsuffix-cgo-is-no-longer-required\" target=\"_blank\" rel=\"noopener\">cgoを使わないGoのクロスコンパイル時に -installsuffix cgo が不要になってた - Carpe Diem</a></p>\n</li>\n<li>\n<p><a href=\"https://www.arp242.net/static-go.html\" target=\"_blank\" rel=\"noopener\">Statically compiling Go programs</a></p>\n</li>\n</ul>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Rust</div>\n<ul>\n<li>\n<p><a href=\"https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html\" target=\"_blank\" rel=\"noopener\">MUSL support for fully static binaries - The Edition Guide</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.rust-jp.rs/tatsuya6502/posts/2019-12-statically-linked-binary/\" target=\"_blank\" rel=\"noopener\">RustのLinux muslターゲット （その1：Linux向けのポータブルなバイナリを作る）</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"footnotes\">\n<hr>\n<div class=\"footnote\" id=\"_footnotedef_1\">\n<a href=\"#_footnoteref_1\">1</a>. <code>binutils</code> パッケージは <code>strip</code> コマンドのためにインストールしている。\n</div>\n</div>","title":"Go と Rust における静的リンクのビルド方法（+ Dockerfile サンプル）","created_at":"2021-06-29","tags":["golang","rust","docker"],"updated_at":"2021-06-29","author":"秋々すすき","revision":"1.0"}