{"filename":"nuxt_tsconfig_dedicated_to_building.adoc","rendered":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">目次</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_はじめに\">はじめに🐏</a></li>\n<li><a href=\"#_nuxt_ビルド時に参照する_tsconfig_json_を指定する方法\"><em>Nuxt</em> ビルド時に参照する <code>tsconfig.json</code> を指定する方法💾</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#created-tsconfig\">ビルド用の <em>TSConfig</em></a></li>\n<li><a href=\"#specify-tsconfig\">ビルド時の <code>tsconfig.json</code> を指定</a></li>\n</ul>\n</li>\n<li><a href=\"#_参考\">参考📖</a></li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_はじめに\">はじめに🐏</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><em>Nuxt</em> を <em>TypeScript</em> で利用しているとき、ビルド時に <code>git worktree</code> や <code>git submodule</code> 配下のファイルまでチェックしてエラーを出してくるので困った。</p>\n</div>\n<div class=\"paragraph\">\n<p>対処方法としては <code>tsconfig.json</code> の <code>include</code> や <code>exclude</code> で対象/除外のファイルを制御すればいい。<br>\nただ <em>VS Code</em> のインテリセンスは有効化のままにしたかったので、<em>Nuxt</em> のビルド時だけ使う別の <code>tsconfig.json</code> を読み込むようにしたい。</p>\n</div>\n<table class=\"tableblock frame-all grid-all fit-content\">\n<caption class=\"title\">Table 1. 環境</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">App</th>\n<th class=\"tableblock halign-left valign-top\">Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Nuxt</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">2.15.4</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">TypeScript</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">4.2.3</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">@nuxt/typescript-build</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">2.1.0</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_nuxt_ビルド時に参照する_tsconfig_json_を指定する方法\"><em>Nuxt</em> ビルド時に参照する <code>tsconfig.json</code> を指定する方法💾</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>方法自体は簡単で、</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><a href=\"#created-tsconfig\">ビルド用の <em>TSConfig</em> を作成</a></p>\n</li>\n<li>\n<p><a href=\"#specify-tsconfig\">作成した <em>TSConfig</em> ファイルパスを <code>nuxt.config.json</code> で指定</a></p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>の2点だけすればいい。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"created-tsconfig\">ビルド用の <em>TSConfig</em></h3>\n<div class=\"paragraph\">\n<p><a href=\"https://www.typescriptlang.org/tsconfig#extends\" target=\"_blank\" rel=\"noopener\"><code>extends</code></a> を利用して現行の <code>tsconfig.json</code> の設定を引き継ぐとよさそう。</p>\n</div>\n<div class=\"paragraph\">\n<p><code>include</code> や <code>exclude</code> 設定を上書きしてコンパイル対象とするファイルを制限する。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 1. ビルド用に調整した TSConfig の例</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">tsconfig.nuxt.json</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-json\"\n    data-lang=\"json\">{\n  \"extends\": \"./tsconfig.json\",   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n  \"include\": [\"src/**/*\", \"src/**/*.vue\"],  <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n  \"exclude\": [\"node_modules\", \"**/*.spec.ts\"]  <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n}</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>通常の <code>tsconfig.json</code> ファイルを読み込み、設定を継承する。<br>\nパス指定するさいにファイル名だけではエラーになるので注意。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>コンパイル対象をソースがある <code>src/</code> ディレクトリ以下に限定。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>除外するファイル指定を上書き。ここでは単体テスト用のファイルを追加して指定。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"specify-tsconfig\">ビルド時の <code>tsconfig.json</code> を指定</h3>\n<div class=\"paragraph\">\n<p>結論から言えば <code>@nuxt/typescript-build</code> のモジュールオプションで指定できる。<br>\n下記のように <code>nuxt.config.js</code> ファイルにオプション設定を追加する。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 2. ビルド時に読み込む tsconfig.json を指定</div>\n<div class=\"content\">\n<div \n    class=\"listingblock\">\n<div class=\"title\">nuxt.config.js でモジュールオプションを追加</div>\n  <div class=\"content\">\n  <pre class=\"highlight \" ><code class=\"language-js\"\n    data-lang=\"js\">export default {\n  typescript: {   <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n    typeCheck: {  <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n      typescript: {\n        configFile: resolve(__dirname, 'tsconfig.nuxt.json'),   <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n        extensions: { vue: true },    <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n      },\n    },\n  },\n}</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><a href=\"https://typescript.nuxtjs.org/guide/setup/#module-options\" target=\"_blank\" rel=\"noopener\"><code>@nuxt/typescript-build</code> のモジュールオプション設定</a>。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>型チェックに利用する <a href=\"https://github.com/TypeStrong/fork-ts-checker-webpack-plugin#options\" target=\"_blank\" rel=\"noopener\"><code>fork-ts-checker-webpack-plugin</code> のオプション</a>を記述。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>ビルド用に調整した <em>TSConfig</em> ファイルのパスを指定。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td><em>Vue</em> の単一ファイルコンポーネントへの対応を有効化。<br>\n<a href=\"https://github.com/nuxt/typescript/blob/%40nuxt/typescript-runtime%402.1.0/packages/typescript-build/src/index.ts#L77\" target=\"_blank\" rel=\"noopener\"><code>@nuxt/typescript-build</code> のソース</a>を見るとモジュールオプションを浅いコピーしているので、ここで明示的に指定しておく。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>以上で <em>Nuxt</em> のビルド時には専用の <em>TSConfig</em> が適用される。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考📖</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<div class=\"title\">Nuxt</div>\n<ul>\n<li>\n<p><a href=\"https://typescript.nuxtjs.org\" target=\"_blank\" rel=\"noopener\">Nuxt TypeScript</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/TypeStrong/fork-ts-checker-webpack-plugin\" target=\"_blank\" rel=\"noopener\">Fork TS Checker Webpack Plugin</a></p>\n</li>\n</ul>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">TSConfig</div>\n<ul>\n<li>\n<p><a href=\"https://www.typescriptlang.org/tsconfig\" target=\"_blank\" rel=\"noopener\">TypeScript: TSConfig Reference - Docs on every TSConfig option</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","title":"Nuxt TypeScript においてビルド用に別の tsconfig.json を指定したい","created_at":"2021-05-07","tags":["nuxt.js","tsconfig"],"updated_at":"2021-05-07","author":"秋々すすき","revision":"1.0"}