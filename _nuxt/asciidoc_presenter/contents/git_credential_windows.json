{"filename":"git_credential_windows.adoc","rendered":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">目次</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_はじめに\">はじめに📌</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_やったこと\">やったこと</a></li>\n</ul>\n</li>\n<li><a href=\"#_個人アクセストークンの利用方法\">個人アクセストークンの利用方法🔑</a></li>\n<li><a href=\"#_git_の_credential_helper\">Git の credential helper 🔐</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_credential_helperがうまく設定されない場合\">credential.helperがうまく設定されない場合</a></li>\n</ul>\n</li>\n<li><a href=\"#_windows資格情報マネージャーへの登録\">Windows資格情報マネージャーへの登録🗃️</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_powershell_から登録する\">PowerShell から登録する</a>\n<ul class=\"sectlevel3\">\n<li><a href=\"#_登録した資格情報の確認\">登録した資格情報の確認</a></li>\n<li><a href=\"#_資格情報の削除\">資格情報の削除</a></li>\n</ul>\n</li>\n<li><a href=\"#_guiで登録する場合\">GUIで登録する場合</a></li>\n</ul>\n</li>\n<li><a href=\"#_おわりに\">おわりに😎</a></li>\n<li><a href=\"#_参考\">参考📖</a></li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_はじめに\">はじめに📌</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><em>GitHub</em> はHTTPプロトコルにおけるパスワード認証を廃止して個人アクセストークン認証への切り替えを推奨している（<a href=\"https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/\" target=\"_blank\" rel=\"noopener\">参考</a>）。<br>\n今までは主にSSH認証を使っていたけど、この際だから推奨されている <em>個人アクセストークン認証 over HTTPS</em> に切り替えることにした。</p>\n</div>\n<div class=\"paragraph\">\n<p>とはいえ <code>git</code> 操作のたびにユーザ名や個人アクセストークンを入力するのは面倒なので、自動的に認証するよう設定を行う。</p>\n</div>\n<table class=\"tableblock frame-all grid-all fit-content\">\n<caption class=\"title\">Table 1. 環境</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">App</th>\n<th class=\"tableblock halign-left valign-top\">Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Windows10</p></td>\n<td class=\"tableblock halign-left valign-top\"></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">git</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">2.27.0.windows.1</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">PowerShell</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">7.0.3</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"sect2\">\n<h3 id=\"_やったこと\">やったこと</h3>\n<div class=\"imageblock kroki\">\n<div class=\"content\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" contentScriptType=\"application/ecmascript\" contentStyleType=\"text/css\" height=\"266px\" preserveAspectRatio=\"none\" style=\"width:419px;height:266px;background:#FFFFFF;\" version=\"1.1\" viewBox=\"0 0 419 266\" width=\"419px\" zoomAndPan=\"magnify\"><defs><filter height=\"300%\" id=\"f1f5qet8l1shtd\" width=\"300%\" x=\"-1\" y=\"-1\"><feGaussianBlur result=\"blurOut\" stdDeviation=\"2.0\"/><feColorMatrix in=\"blurOut\" result=\"blurOut2\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0\"/><feOffset dx=\"4.0\" dy=\"4.0\" in=\"blurOut2\" result=\"blurOut3\"/><feBlend in=\"SourceGraphic\" in2=\"blurOut3\" mode=\"normal\"/></filter></defs><g><rect fill=\"#FFFFFF\" filter=\"url(#f1f5qet8l1shtd)\" height=\"76.2\" style=\"stroke:#000000;stroke-width:2.0;\" width=\"196\" x=\"23\" y=\"11\"/><path d=\"M77,11 L77,20.7999 L67,30.7999 L23,30.7999 \" fill=\"none\" style=\"stroke:#000000;stroke-width:2.0;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"14\" lengthAdjust=\"spacing\" textLength=\"44\" x=\"26\" y=\"25.9999\">GitHub</text><rect fill=\"#FEFECE\" filter=\"url(#f1f5qet8l1shtd)\" height=\"34.4001\" rx=\"12.5\" ry=\"12.5\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"176\" x=\"33\" y=\"40.7999\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"156\" x=\"43\" y=\"62.8\">個人アクセストークンを作成</text><rect fill=\"#FFFFFF\" filter=\"url(#f1f5qet8l1shtd)\" height=\"152.0002\" style=\"stroke:#000000;stroke-width:2.0;\" width=\"391\" x=\"11\" y=\"97.2\"/><path d=\"M54,97.2 L54,107 L44,117 L11,117 \" fill=\"none\" style=\"stroke:#000000;stroke-width:2.0;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"14\" lengthAdjust=\"spacing\" textLength=\"33\" x=\"14\" y=\"112.2\">Local</text><rect fill=\"#FEFECE\" filter=\"url(#f1f5qet8l1shtd)\" height=\"34.4001\" rx=\"12.5\" ry=\"12.5\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"164\" x=\"39\" y=\"134\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"144\" x=\"49\" y=\"156\">git の credential.helper 設定</text><path d=\"M241,200.0001 L241,208.8002 L221,212.8002 L241,216.8002 L241,225.6002 A0,0 0 0 0 241,225.6002 L392,225.6002 A0,0 0 0 0 392,225.6002 L392,210.0001 L382,200.0001 L241,200.0001 A0,0 0 0 0 241,200.0001 \" fill=\"#FBFB77\" filter=\"url(#f1f5qet8l1shtd)\" style=\"stroke:#A80036;stroke-width:1.0;\"/><path d=\"M382,200.0001 L382,210.0001 L392,210.0001 L382,200.0001 \" fill=\"#FBFB77\" style=\"stroke:#A80036;stroke-width:1.0;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacing\" textLength=\"130\" x=\"247\" y=\"218.0002\">必須作業じゃなかった</text><rect fill=\"#FEFECE\" filter=\"url(#f1f5qet8l1shtd)\" height=\"48.8002\" rx=\"12.5\" ry=\"12.5\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"200\" x=\"21\" y=\"188.4001\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"180\" x=\"31\" y=\"210.4001\">Windows資格情報マネージャーに</text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"145\" x=\"31\" y=\"224.8002\">GitHub認証情報を登録する</text><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"121\" x2=\"121\" y1=\"168.4001\" y2=\"188.4001\"/><polygon fill=\"#A80036\" points=\"117,178.4001,121,188.4001,125,178.4001,121,182.4001\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"121\" x2=\"121\" y1=\"75.2\" y2=\"134\"/><polygon fill=\"#A80036\" points=\"117,124,121,134,125,124,121,128\" style=\"stroke:#A80036;stroke-width:1.0;\"/><!--MD5=[33005b7078e06537779e0e0d2fc85e72]\n@startuml\npartition GitHub {\n  :個人アクセストークンを作成;\n}\n\npartition Local {\n  :git の credential.helper 設定;\n  :Windows資格情報マネージャーに\n  GitHub認証情報を登録する;\n  note right: 必須作業じゃなかった\n}\n@enduml\n\nPlantUML version 1.2021.8(Sat Jun 26 08:20:59 GMT 2021)\n(GPL source distribution)\nJava Runtime: OpenJDK Runtime Environment\nJVM: OpenJDK 64-Bit Server VM\nDefault Encoding: UTF-8\nLanguage: en\nCountry: US\n--></g></svg>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>個人アクセストークンを作成した後、次のコマンドを叩いたら設定終わり。</p>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">Git認証・Windows資格情報の設定</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-prompt=\"PS C:\\workspace&gt;\"\n    data-output=\"2,7\"\n    ><code class=\"language-powershell\"\n    data-lang=\"powershell\">git config --global credential.helper wincred\n\n$cred = Get-Credential -Credential <em>YOUR_GITHUB_USERNAME</em>\ncmdkey /generic:git:https://github.com `\n  /user:$($cred.UserName) `\n  /pass:$($cred.GetNetworkCredential().Password)\n\nRemove-Variable cred</code></pre>\n  </div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_個人アクセストークンの利用方法\">個人アクセストークンの利用方法🔑</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>使うときは単純にパスワードとして個人アクセストークンの値を入力すればいいみたい。</p>\n</div>\n<div class=\"paragraph\">\n<p>個人アクセストークンの作成方法については<a href=\"https://docs.github.com/ja/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token\" target=\"_blank\" rel=\"noopener\">公式リファレンス</a>を参考。<br>\nスコープはとりあえず <code>repo</code> にチェックしておけばよいかと。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_git_の_credential_helper\">Git の credential helper 🔐</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>GitではHTTPプロトコルを利用する場合の認証情報を保存するための仕組みが有り、<code>credential.helper</code> オプションで設定する。</p>\n</div>\n<div class=\"paragraph\">\n<p>今回はWindows環境なので <code>wincred</code> を使い、Windowsの資格情報マネージャーで認証を管理する。</p>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n<div class=\"title\">gitの認証ツールとしてwincredを利用する</div>\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-prompt=\"PS C:\\workspace&gt;\"\n    ><code class=\"language-powershell\"\n    data-lang=\"powershell\">git config --global credential.helper wincred</code></pre>\n  </div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">定番の認証ツール</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Windows</dt>\n<dd>\n<p>Windows資格情報を利用する <code>wincred</code></p>\n</dd>\n<dt class=\"hdlist1\">MacOS</dt>\n<dd>\n<p><code>osxkeychain</code></p>\n</dd>\n<dt class=\"hdlist1\">Linux</dt>\n<dd>\n<p>調べてみたところではみんなまちまちっぽい。<br>\n<code>cache</code> でメモリに短時間保存する、または <a href=\"https://github.com/microsoft/Git-Credential-Manager-Core\" target=\"_blank\" rel=\"noopener\">Git Credential Manager Core</a> を使ってGPG暗号化して管理するのが主流？</p>\n</dd>\n</dl>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_credential_helperがうまく設定されない場合\">credential.helperがうまく設定されない場合</h3>\n<div class=\"paragraph\">\n<p>自分の場合は <code>~/.gitcofig</code> ファイルに <code>[credential \"helperselector\"]</code> が設定されていたので、これを削除して改めて <code>wincred</code> を設定した。</p>\n</div>\n<div \n    class=\"listingblock no-line-numbers command-line\">\n\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-prompt=\"PS C:\\workspace&gt;\"\n    ><code class=\"language-powershell\"\n    data-lang=\"powershell\">git config --global --unset credential.helperselector.selected\ngit config --global credential.helper wincred</code></pre>\n  </div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_windows資格情報マネージャーへの登録\">Windows資格情報マネージャーへの登録🗃️</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code>credential.helperselector</code> を上記で設定していれば、最初の <code>git</code> 操作時に認証情報の入力を求められて自動的に保存される。</p>\n</div>\n<div class=\"paragraph\">\n<p>以下はその最初の入力をコマンドやGUIから能動的にやる方法。<br>\nなので必須作業ではないです。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_powershell_から登録する\">PowerShell から登録する</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://docs.microsoft.com/ja-jp/windows-server/administration/windows-commands/cmdkey\" target=\"_blank\" rel=\"noopener\"><code>cmdkey</code> コマンド</a>を使えば <em>PowerShell</em> から登録できる。<br>\n今回は <em>GitHub</em> の認証情報を登録していく。</p>\n</div>\n<div class=\"paragraph\">\n<p>一応セキュリティを考慮して、個人アクセストークンを平文で扱うことは避け、<a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-credential?view=powershell-7.1\" target=\"_blank\" rel=\"noopener\"><code>Get-Credential</code> コマンドレット</a>により暗号化してから扱うことにした。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 1. GitHubのユーザ名と個人アクセストークンを資格情報に登録する</div>\n<div class=\"content\">\n<div \n    class=\"listingblock no-line-numbers command-line\">\n\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-prompt=\"PS C:\\workspace&gt;\"\n    data-output=\"1,3-8,12-13\"\n    ><code class=\"language-powershell\"\n    data-lang=\"powershell\"><i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n$cred = Get-Credential -Credential YOUR_GITHUB_USERNAME\n\nPowerShell credential request\nEnter your credentials.\nPassword for user YOUR_GITHUB_USERNAME: *****  <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\n<i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\ncmdkey /generic:git:https://github.com `\n  /user:$($cred.UserName) `\n  /pass:$($cred.GetNetworkCredential().Password)\n\n<i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\nRemove-Variable cred</code></pre>\n  </div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td><em>GitHub</em> の認証情報を変数 <code>$cred</code> に保存する。<br>\n<code>YOUR_GITHUB_USERNAME</code> はそれぞれ自分の <em>GitHub</em> ユーザ名に修正する。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>ここで個人アクセストークンを入力する。これは暗号化される。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td><code>cmdkey</code> コマンドで汎用資格情報に登録する。<br>\n今回は <em>GitHub</em> を対象にするので、ターゲットを <code>git:https://github.com</code> とする。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>必要なくなった変数 <code>$cred</code> を削除。</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\" data-md-icon=\"emoji_objects\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">変数展開の仕方について</div>\n<code>cmdkey</code> はうまく <em>PowerShell</em> 変数オブジェクトをあつかえない。<br>\nよって変数 <code>$cred</code> がコマンドに渡される前に変数展開させておく必要がある。<br>\nこのため変数展開には部分式（ <code>$($&#8230;&#8203;)</code> ）を使うことで先行評価させている（参考: <a href=\"https://tech.guitarrapc.com/entry/2015/01/17/073225\" target=\"_blank\" rel=\"noopener\">PowerShell のString評価の方法と罠</a>）。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>Get-Credential</code> コマンドレットを実行したとき、環境によってはCLIの代わりに次のようなダイアログが出る。<br>\nこのときもパスワード欄に個人アクセストークンを入力すればいい。<br>\n<span class=\"image\"><img src=\"_images/windows/credential/powershell-credential_input.png\" alt=\"資格情報入力ダイアログ\"></span></p>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>以上で <code>git</code> 利用時の <em>GitHub</em> 認証情報が登録された。<br>\nこれによりプライベートリポジトリをクローンするときなどで、毎回ユーザ名・パスワードを入力する手間が省ける。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_登録した資格情報の確認\">登録した資格情報の確認</h4>\n<div class=\"paragraph\">\n<p>資格情報マネージャーに登録された <em>Git</em> の認証情報を確認したい場合は <code>cmdkey /list:&lt;TARGET_NAME&gt;</code> コマンドで一覧表示できる。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 2. 登録されているgit資格情報の一覧確認</div>\n<div class=\"content\">\n<div \n    class=\"listingblock no-line-numbers command-line\">\n\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-prompt=\"PS C:\\workspace&gt;\"\n    data-output=\"2-6\"\n    ><code class=\"language-powershell\"\n    data-lang=\"powershell\">cmdkey /list:git:http*\n\n    ターゲット: git:https://github.com\n    種類: 汎用\n    ユーザー: <em>YOUR_GITHUB_USERNAME</em>\n    ローカル コンピューターの常設</code></pre>\n  </div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_資格情報の削除\">資格情報の削除</h4>\n<div class=\"paragraph\">\n<p>間違えた資格情報を登録してしまったときなど、削除するには <code>cmdkey /delete:&lt;TARGET_NAME&gt;</code> コマンドを使う。</p>\n</div>\n<div class=\"exampleblock\">\n<div class=\"title\">Example 3. GutHubの資格情報を削除</div>\n<div class=\"content\">\n<div \n    class=\"listingblock no-line-numbers command-line\">\n\n  <div class=\"content\">\n  <pre class=\"highlight command-line\" data-prompt=\"PS C:\\workspace&gt;\"\n    data-output=\"2-3\"\n    ><code class=\"language-powershell\"\n    data-lang=\"powershell\">cmdkey /delete:git:https://github.com\n\nCMDKEY: 資格情報を正しく削除しました。</code></pre>\n  </div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_guiで登録する場合\">GUIで登録する場合</h3>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>コントロールパネル</code> &#8594; <code>ユーザーアカウント</code> &#8594; <code>資格情報マネージャー</code> &#8594; <code>Windows資格情報</code> を開く</p>\n</li>\n<li>\n<p><code>汎用資格情報の追加</code> からGit認証情報を追加</p>\n</li>\n<li>\n<p>今回はGitHub接続時の認証情報を追加</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>インターネットまたはドメインのアドレス</code> には <code>git:https://github.com</code> を指定。</p>\n</li>\n<li>\n<p><code>ユーザー名</code> はGitHubに登録しているユーザ名またはメールアドレス。</p>\n</li>\n<li>\n<p><code>パスワード</code> に個人アクセストークンを入力する。</p>\n</li>\n</ul>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_おわりに\">おわりに😎</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>今回は <code>git</code> コマンドによる <em>GitHub</em> への認証をWindows資格情報マネージャーで管理することで、自動的に認証されるようにした。<br>\nこれでもうHTTPSプロトコルでの認証もこわくない。</p>\n</div>\n<div class=\"paragraph\">\n<p>記事の主体が資格情報マネージャーのコマンド操作になった気がするけど、まあええやろの精神😗。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考📖</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%81%AE%E4%BF%9D%E5%AD%98\" target=\"_blank\" rel=\"noopener\">Git - 認証情報の保存</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/ja-jp/windows-server/administration/windows-commands/cmdkey\" target=\"_blank\" rel=\"noopener\">cmdkey | Microsoft Docs</a></p>\n</li>\n<li>\n<p><a href=\"https://tech.guitarrapc.com/entry/2014/01/14/101056\" target=\"_blank\" rel=\"noopener\">PowerShell で Get-Credential を利用する - tech.guitarrapc.cóm</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-credential?view=powershell-7.1\" target=\"_blank\" rel=\"noopener\">Get-Credential (Microsoft.PowerShell.Security) - PowerShell | Microsoft Docs</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","title":"Gitにおけるパスワード入力を省略する（Windows編）","created_at":"2021-01-07","tags":["git","github","windows","資格情報マネージャー","powershell"],"updated_at":"2021-01-07","author":"秋々すすき","revision":"1.1"}