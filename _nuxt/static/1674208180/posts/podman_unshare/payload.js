__NUXT_JSONP__("/posts/podman_unshare", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E){return {data:[{posted:{filename:"podman_unshare.adoc",rendered:["\u003Cdiv id=\"toc\" class=\"toc\"\u003E","\u003Cdiv id=\"toctitle\"\u003E目次\u003C\u002Fdiv\u003E","\u003Cul class=\"sectlevel1\"\u003E","\u003Cli\u003E\u003Ca href=\"#_はじめに\"\u003E🍵はじめに\u003C\u002Fa\u003E\u003C\u002Fli\u003E","\u003Cli\u003E\u003Ca href=\"#_問題のファイルパーミッション\"\u003E🚨問題のファイルパーミッション\u003C\u002Fa\u003E\u003C\u002Fli\u003E","\u003Cli\u003E\u003Ca href=\"#_podman_unshare_command\"\u003E🚀 podman unshare \u003Cem\u003ECOMMAND\u003C\u002Fem\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E","\u003Cli\u003E\u003Ca href=\"#_おわりに\"\u003E😎おわりに\u003C\u002Fa\u003E\u003C\u002Fli\u003E","\u003Cli\u003E\u003Ca href=\"#_参考\"\u003E📖参考\u003C\u002Fa\u003E\u003C\u002Fli\u003E",n,a,e,"\u003Ch2 id=\"_はじめに\"\u003E🍵はじめに\u003C\u002Fh2\u003E",f,"\u003Cdiv class=\"dlist\"\u003E","\u003Cdl\u003E","\u003Cdt class=\"hdlist1\"\u003E前提\u003C\u002Fdt\u003E",j,"\u003Cp\u003Eルートレスモードの \u003Cem\u003EPodman\u003C\u002Fem\u003E では、ユーザ名前空間という仕組みによって実行ユーザーのUIDがコンテナ内の \u003Cem\u003Eroot\u003C\u002Fem\u003E としてマッピングされる。\u003Cbr\u003E","これにより、ホスト側のディレクトリをコンテナにマウントしたときに、コンテナ側でファイルを作成してもパーミッションの問題に悩まされることなく利用できる。\u003C\u002Fp\u003E",k,"\u003Cdt class=\"hdlist1\"\u003E問題\u003C\u002Fdt\u003E",j,"\u003Cp\u003Eコンテナ側の \u003Cstrong\u003E\u003Cem\u003Eroot\u003C\u002Fem\u003E ではない\u003C\u002Fstrong\u003E一般ユーザーによってファイル作成された場合、ホスト側からファイル操作しようとするとパーミッションの問題が発生する。\u003C\u002Fp\u003E",k,"\u003Cdt class=\"hdlist1\"\u003E対策\u003C\u002Fdt\u003E",j,"\u003Cp\u003Eファイル操作用のコンテナを起動しなくても、\u003Ccode\u003Epodman unshare\u003C\u002Fcode\u003E コマンドが使えるかも。\u003C\u002Fp\u003E",k,"\u003C\u002Fdl\u003E",a,"\u003Ctable class=\"tableblock frame-all grid-all fit-content\"\u003E","\u003Ccaption class=\"title\"\u003ETable 1. 環境\u003C\u002Fcaption\u003E","\u003Ccolgroup\u003E",o,o,"\u003C\u002Fcolgroup\u003E","\u003Cthead\u003E",b,"\u003Cth class=\"tableblock halign-left valign-top\"\u003EApp\u003C\u002Fth\u003E","\u003Cth class=\"tableblock halign-left valign-top\"\u003EVersion\u003C\u002Fth\u003E",c,"\u003C\u002Fthead\u003E","\u003Ctbody\u003E",b,"\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003Epodman\u003C\u002Fp\u003E\u003C\u002Ftd\u003E","\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E3.0.1\u003C\u002Fp\u003E\u003C\u002Ftd\u003E",c,"\u003C\u002Ftbody\u003E",g,"\u003Cdiv class=\"admonitionblock important\"\u003E",h,b,p,"\u003Ci class=\"fa icon-important\" title=\"Important\" data-md-icon=\"report\"\u003E\u003C\u002Fi\u003E",i,q,"この記事では \u003Cstrong\u003Eルートレスモード\u003C\u002Fstrong\u003E を前提にしています。",i,c,g,a,a,a,e,"\u003Ch2 id=\"_問題のファイルパーミッション\"\u003E🚨問題のファイルパーミッション\u003C\u002Fh2\u003E",f,d,"\u003Cp\u003Eコンテナ側の一般ユーザーで作成したファイルをホスト側から見ると下記のようになる。\u003C\u002Fp\u003E",a,r,"\u003Cdiv class=\"title\"\u003EExample 1. コンテナ側で一般ユーザーが作成したファイル\u003C\u002Fdiv\u003E",s,t,u,"\u003Cdiv class=\"title\"\u003Eホスト側からではパーミッションが問題になる\u003C\u002Fdiv\u003E",v,w,"    data-host=\"host\"","    data-output=\"2-3,5-10\"",x,"    data-lang=\"bash\"\u003Els -An README.md","-rw-r--r-- 1 166536 166536 3584 Aug 30 00:10 README.md  \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E",l,"echo 'hello' &gt;&gt; README.md   \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E","-bash: README.md: Permission denied\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E",y,a,z,h,b,A,"\u003Ctd\u003E\u003Cem\u003EUID\u003C\u002Fem\u003E, \u003Cem\u003EGID\u003C\u002Fem\u003E の値が \u003Cem\u003EPodman\u003C\u002Fem\u003E によるマッピング後の値になっている。\u003C\u002Ftd\u003E",c,b,B,"\u003Ctd\u003E当然、上書きしようとするとパーミッションで拒否される。\u003C\u002Ftd\u003E",c,g,a,a,a,"\u003Chr\u003E",d,"\u003Cp\u003Eこのように、ホスト側からファイル操作したいのにパーミッションの問題が発生している場合、\u003Ccode\u003Epodman unshare\u003C\u002Fcode\u003E コマンドを用いると解決できる。\u003C\u002Fp\u003E",a,a,a,e,"\u003Ch2 id=\"_podman_unshare_command\"\u003E🚀 podman unshare \u003Cem\u003ECOMMAND\u003C\u002Fem\u003E\u003C\u002Fh2\u003E",f,d,"\u003Cp\u003E\u003Ccode\u003ECOMMAND\u003C\u002Fcode\u003E を \u003Cem\u003EPodman\u003C\u002Fem\u003E が扱うユーザ名前空間内で実行する。\u003C\u002Fp\u003E",a,d,"\u003Cp\u003Eコンテナ側の一般ユーザーで作成したファイルを、ホスト側で編集したいときに利用できる。\u003C\u002Fp\u003E",a,r,s,t,u,l,v,w,"    data-host=\"local\"","    data-output=\"2,4-5\"",x,"    data-lang=\"bash\"\u003Epodman unshare -- id","uid=0(root) gid=0(root) groups=0(root),65534(nogroup)   \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E","podman unshare -- ls -An README.md","-rw-r--r-- 1 1001 1001 3584 Aug 30 00:10 README.md      \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E",l,"podman unshare -- nano README.md\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E",y,a,z,h,b,A,"\u003Ctd\u003Eコンテナで使われているユーザ名前空間上において操作できる。\u003C\u002Ftd\u003E",c,b,B,"\u003Ctd\u003E\u003Ccode\u003Epodman unshare\u003C\u002Fcode\u003E に渡したコマンドは \u003Cem\u003Eroot\u003C\u002Fem\u003E として実行される。\u003Cbr\u003E","👉ルートレス \u003Cem\u003EPodman\u003C\u002Fem\u003E において、実行ユーザーは \u003Cem\u003Eroot\u003C\u002Fem\u003E にマッピングされるため。\u003C\u002Ftd\u003E",c,g,a,"\u003Cdiv class=\"admonitionblock note\"\u003E",h,b,p,"\u003Ci class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"\u003E\u003C\u002Fi\u003E",i,q,"\u003Ccode\u003E--\u003C\u002Fcode\u003E はあってもなくてもいい。\u003Cbr\u003E","例では見た目がわかりやすいかなと思ってつけている。",i,c,g,a,a,a,a,a,e,"\u003Ch2 id=\"_おわりに\"\u003E😎おわりに\u003C\u002Fh2\u003E",f,d,"\u003Cp\u003Eコンテナ側で生成されたファイルをちょっと編集したくなったとき、いちいちコンテナを起動する必要性がなくなって助かる🤗。\u003C\u002Fp\u003E",a,d,"\u003Cp\u003Eもっとも、こういうめったに使わないけど知っておくと便利なコマンドって、作業が終わってから見つかるんだけど。\u003Cbr\u003E","ぴえん🥺。\u003C\u002Fp\u003E",a,a,a,e,"\u003Ch2 id=\"_参考\"\u003E📖参考\u003C\u002Fh2\u003E",f,"\u003Cdiv class=\"ulist\"\u003E","\u003Cul\u003E",C,"\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.podman.io\u002Fen\u002Flatest\u002Fmarkdown\u002Fpodman-unshare.1.html\" target=\"_blank\" rel=\"noopener\"\u003Epodman-unshare(1) — Podman documentation\u003C\u002Fa\u003E\u003C\u002Fp\u003E",D,C,"\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Frheb.hatenablog.com\u002Fentry\u002Fhow-does-rootless-podman-work\" target=\"_blank\" rel=\"noopener\"\u003EルートレスのPodmanはどのように動作しますか？ - 赤帽エンジニアブログ\u003C\u002Fa\u003E\u003C\u002Fp\u003E",D,n,a,a,a],title:"podman unshare コマンドを使ってコンテナから作成したファイルのパーミッション問題を解決する",created_at:E,tags:["podman","備忘録"],updated_at:E,author:"秋々すすき",description:m,revision:"1.0",revision_remark:m},navi:{next:{path:"\u002Fposts\u002Fsystemd_scheduling",title:"systemd を使ってジョブを定期実行させる備忘録"},prev:{path:"\u002Fposts\u002Fraspi_extend_life_of_storage",title:"Raspberry Pi の起動ストレージ（SD\u002FSSD\u002FUSBメモリ）の寿命を伸ばす"}},currentPath:"https:\u002F\u002Fvlike-vlife.netlify.app\u002Fposts\u002Fpodman_unshare"}],fetch:{},mutations:m}}("\u003C\u002Fdiv\u003E","\u003Ctr\u003E","\u003C\u002Ftr\u003E","\u003Cdiv class=\"paragraph\"\u003E","\u003Cdiv class=\"sect1\"\u003E","\u003Cdiv class=\"sectionbody\"\u003E","\u003C\u002Ftable\u003E","\u003Ctable\u003E","\u003C\u002Ftd\u003E","\u003Cdd\u003E","\u003C\u002Fdd\u003E","",void 0,"\u003C\u002Ful\u003E","\u003Ccol\u003E","\u003Ctd class=\"icon\"\u003E","\u003Ctd class=\"content\"\u003E","\u003Cdiv class=\"exampleblock\"\u003E","\u003Cdiv class=\"content\"\u003E","\u003Cdiv ","    class=\"listingblock no-line-numbers command-line\"\u003E","  \u003Cdiv class=\"content\"\u003E","  \u003Cpre class=\"highlight command-line\" data-user=\"hoge\"","    \u003E\u003Ccode class=\"language-bash\"","  \u003C\u002Fdiv\u003E","\u003Cdiv class=\"colist arabic\"\u003E","\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E","\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E2\u003C\u002Fb\u003E\u003C\u002Ftd\u003E","\u003Cli\u003E","\u003C\u002Fli\u003E","2021-10-04")));