__NUXT_JSONP__("/posts/yaml_template_tool", (function(a,b,c){return {data:[{posted:{filename:"yaml_template_tool.adoc",rendered:"\u003Cdiv id=\"toc\" class=\"toc\"\u003E\n\u003Cdiv id=\"toctitle\"\u003E目次\u003C\u002Fdiv\u003E\n\u003Cul class=\"sectlevel1\"\u003E\n\u003Cli\u003E\u003Ca href=\"#_はじめに\"\u003E🍨はじめに\u003C\u002Fa\u003E\n\u003Cul class=\"sectlevel2\"\u003E\n\u003Cli\u003E\u003Ca href=\"#_使ってみた感想\"\u003E使ってみた感想\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_ytt_yaml_templating_tool\"\u003E🚀 \u003Ccode\u003Eytt\u003C\u002Fcode\u003E (\u003Cem\u003EYAML Templating Tool\u003C\u002Fem\u003E)\u003C\u002Fa\u003E\n\u003Cul class=\"sectlevel2\"\u003E\n\u003Cli\u003E\u003Ca href=\"#_インストール\"\u003Eインストール\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_コマンドラインcliでの実行方法\"\u003Eコマンドライン（CLI）での実行方法\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_ytt_の文法についてのサンプル集\"\u003E📔 \u003Ccode\u003Eytt\u003C\u002Fcode\u003E の文法についてのサンプル集\u003C\u002Fa\u003E\n\u003Cul class=\"sectlevel2\"\u003E\n\u003Cli\u003E\u003Ca href=\"#_data-values\"\u003E外部の変数（ \u003Cem\u003EData Values\u003C\u002Fem\u003E ）\u003C\u002Fa\u003E\n\u003Cul class=\"sectlevel3\"\u003E\n\u003Cli\u003E\u003Ca href=\"#_json_データを利用する\"\u003E\u003Cem\u003EJSON\u003C\u002Fem\u003E データを利用する\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_overlays\"\u003Eパッチの適用（ \u003Cem\u003EOverlays\u003C\u002Fem\u003E ）\u003C\u002Fa\u003E\n\u003Cul class=\"sectlevel3\"\u003E\n\u003Cli\u003E\u003Ca href=\"#_共通の設定項目を定義する\"\u003E共通の設定項目を定義する\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_template_モジュール\"\u003E\u003Cem\u003ETemplate\u003C\u002Fem\u003E モジュール\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_文字列のテンプレートtext_templating\"\u003E文字列のテンプレート（\u003Cem\u003EText Templating\u003C\u002Fem\u003E ）\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_コメント\"\u003Eコメント\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_その他\"\u003Eその他\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_faq\"\u003E🍣FAQ\u003C\u002Fa\u003E\n\u003Cul class=\"sectlevel2\"\u003E\n\u003Cli\u003E\u003Ca href=\"#_anchoralias_は使えるの\"\u003Eanchor\u002Falias は使えるの？\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_datavalues_で定義した変数を別の_datavalues_から参照したい\"\u003E\u003Ccode\u003Edata\u002Fvalues\u003C\u002Fcode\u003E で定義した変数を別の \u003Ccode\u003Edata\u002Fvalues\u003C\u002Fcode\u003E から参照したい\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_on_キーが_true_に変換されてしまう\"\u003E\u003Ccode\u003Eon\u003C\u002Fcode\u003E キーが \u003Ccode\u003Etrue\u003C\u002Fcode\u003E に変換されてしまう\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_おわりに\"\u003E😎おわりに\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#_参考\"\u003E📖参考\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect1\"\u003E\n\u003Ch2 id=\"_はじめに\"\u003E🍨はじめに\u003C\u002Fh2\u003E\n\u003Cdiv class=\"sectionbody\"\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Cem\u003EGitHub Actions ワークフロー\u003C\u002Fem\u003E では \u003Cem\u003EYAML\u003C\u002Fem\u003E のアンカーやエイリアスが使えないため同じ設定を何度も記述しなくてはならない場合がある。\u003Cbr\u003E\nとてもつらい。設定を変更したいときには全ての箇所を修正する必要があってつらい。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eそこで \u003Ccode\u003Eytt\u003C\u002Fcode\u003E を使えばテンプレートファイルから \u003Cem\u003EYAML\u003C\u002Fem\u003E ドキュメントを生成できるので楽ができそう。\u003Cbr\u003E\nと思って試してみたサンプルを備忘録として残しておく。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"admonitionblock note\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"icon\"\u003E\n\u003Ci class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"\u003E\u003C\u002Fi\u003E\n\u003C\u002Ftd\u003E\n\u003Ctd class=\"content\"\u003E\n本記事はバージョン \u003Ccode\u003E0.33.0\u003C\u002Fcode\u003E での情報。\n\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_使ってみた感想\"\u003E使ってみた感想\u003C\u002Fh3\u003E\n\u003Cdiv class=\"dlist\"\u003E\n\u003Cdl\u003E\n\u003Cdt class=\"hdlist1\"\u003E\u003Cspan class=\"flex items-center text-green-500\"\u003E\u003Cspan class=\"material-icons\"\u003Echeck\u003C\u002Fspan\u003Eメリット\u003C\u002Fspan\u003E\u003C\u002Fdt\u003E\n\u003Cdd\u003E\n\u003Cp\u003E\u003Cem\u003EYAML\u003C\u002Fem\u003E ドキュメントのある部分を変数化して使い回すような簡単な共通化であれば、さくっと複数ファイルへの適用もできてうれしい。\u003Cbr\u003E\n\u003Cem\u003EOverlays\u003C\u002Fem\u003E がすごい便利。\u003C\u002Fp\u003E\n\u003C\u002Fdd\u003E\n\u003Cdt class=\"hdlist1\"\u003E\u003Cspan class=\"flex items-center text-red-500\"\u003E\u003Cspan class=\"material-icons\"\u003Eclose\u003C\u002Fspan\u003Eデメリット\u003C\u002Fspan\u003E\u003C\u002Fdt\u003E\n\u003Cdd\u003E\n\u003Cp\u003E複雑な共通化をしようとすると、\u003Cem\u003EStarlark\u003C\u002Fem\u003E 言語を学ぶ必要があってしんどい。\u003Cbr\u003E\n\u003Cem\u003EOverlays\u003C\u002Fem\u003E はぜんぜんわからん。ふんいきで使ってる。\u003C\u002Fp\u003E\n\u003C\u002Fdd\u003E\n\u003Cdt class=\"hdlist1\"\u003E結論\u003C\u002Fdt\u003E\n\u003Cdd\u003E\n\u003Cp\u003E複数ファイルに対して簡単な共通化をしたいときにとてもうれしい。\u003Cbr\u003E\n\u003Cem\u003EGitHub Actions ワークフロー\u003C\u002Fem\u003E を複数作成する場合、同じ設定を繰り返し記述することが多いので助かる。\u003C\u002Fp\u003E\n\u003C\u002Fdd\u003E\n\u003C\u002Fdl\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect1\"\u003E\n\u003Ch2 id=\"_ytt_yaml_templating_tool\"\u003E🚀 \u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002F\" target=\"_blank\" rel=\"noopener\"\u003E\u003Ccode\u003Eytt\u003C\u002Fcode\u003E\u003C\u002Fa\u003E (\u003Cem\u003EYAML Templating Tool\u003C\u002Fem\u003E)\u003C\u002Fh2\u003E\n\u003Cdiv class=\"sectionbody\"\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Cem\u003EYAML\u003C\u002Fem\u003E 用のテンプレートエンジン。\u003Cbr\u003E\n\u003Ccode\u003Eytt\u003C\u002Fcode\u003E は \u003Cem\u003Eテンプレート\u003C\u002Fem\u003E および \u003Cem\u003EData Values\u003C\u002Fem\u003E や \u003Cem\u003EOverlays\u003C\u002Fem\u003E ファイルを受け取って \u003Cem\u003EYAML\u003C\u002Fem\u003E ドキュメントを出力する。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"ulist\"\u003E\n\u003Cdiv class=\"title\"\u003E特徴\u003C\u002Fdiv\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Cem\u003EPython\u003C\u002Fem\u003E っぽいプログラミング言語 \u003Cem\u003EStarklark\u003C\u002Fem\u003E を内蔵している。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Cem\u003EYAML\u003C\u002Fem\u003E 構造を把握している。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E環境変数やアノテーションを使うことで、設定の一部上書きができる。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Cem\u003EGo\u003C\u002Fem\u003E 言語製なのでシングルバイナリで利用できる。使いやすい。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fdiv\u003E\n\u003Chr\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Cem\u003EYAML\u003C\u002Fem\u003E 構造を把握しているので、テンプレートなどを書く際には \u003Cem\u003EYAML\u003C\u002Fem\u003E ドキュメントにアノテーションを付け加える形になる。\u003Cbr\u003E\nこのため新たに覚えることが少ないので、さっと使えて便利。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"admonitionblock note\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"icon\"\u003E\n\u003Ci class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"\u003E\u003C\u002Fi\u003E\n\u003C\u002Ftd\u003E\n\u003Ctd class=\"content\"\u003E\n\u003Cdiv class=\"title\"\u003E他テンプレートエンジン（\u003Cem\u003EJinja2\u003C\u002Fem\u003E とか）との比較\u003C\u002Fdiv\u003E\n\u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Fytt-vs-x\u002F\" target=\"_blank\" rel=\"noopener\"\u003Eytt vs x\u003C\u002Fa\u003E に記載されている。\n\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_インストール\"\u003Eインストール\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvmware-tanzu\u002Fcarvel-ytt\u002Freleases\" target=\"_blank\" rel=\"noopener\"\u003E\u003Cem\u003EGitHub\u003C\u002Fem\u003E のリリースページ\u003C\u002Fa\u003Eからバイナリファイルをダウンロードして \u003Cem\u003EPath\u003C\u002Fem\u003E を通すだけ。\u003Cbr\u003E\n\u003Cem\u003EGo\u003C\u002Fem\u003E 言語製のツールはシングルバイナリで利用できるのが素敵。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_コマンドラインcliでの実行方法\"\u003Eコマンドライン（CLI）での実行方法\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eメインのテンプレートファイルだけでなく、後述する \u003Ca href=\"#_data-values\"\u003E\u003Cem\u003EData Values\u003C\u002Fem\u003E\u003C\u002Fa\u003E や \u003Ca href=\"#_overlays\"\u003E\u003Cem\u003EOverlays\u003C\u002Fem\u003E\u003C\u002Fa\u003E のファイルも一緒に読み込ませる。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"exampleblock\"\u003E\n\u003Cdiv class=\"title\"\u003EExample 1. ytt コマンド実行例\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"content\"\u003E\n\u003Cdiv \n    class=\"listingblock no-line-numbers command-line\"\u003E\n\u003Cdiv class=\"title\"\u003E全てのファイルを指定\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight command-line\" \u003E\u003Ccode class=\"language-bash\"\n    data-lang=\"bash\"\u003Eytt \\\n  --file main.template.yml \\\n  --file common_data.yml\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock no-line-numbers command-line\"\u003E\n\u003Cdiv class=\"title\"\u003Eディレクトリを指定\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight command-line\" \u003E\u003Ccode class=\"language-bash\"\n    data-lang=\"bash\"\u003Eytt \\\n  --file path\u002Fto\u002Ftemplate\u002Fdir \\    \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n  --file-mark '**\u002F*ignore.yml:exclude=true'   \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E指定したディレクトリ以下（サブディレクトリも含む）にある全てのファイルが読み込まれる。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E2\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E除外したいファイルパスを指定。詳しくは \u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Ffile-marks\u002F\" target=\"_blank\" rel=\"noopener\"\u003E\u003Cem\u003EFile Marks\u003C\u002Fem\u003E\u003C\u002Fa\u003E を参照。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock no-line-numbers command-line\"\u003E\n\u003Cdiv class=\"title\"\u003Eファイルに保存する場合\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight command-line\" \u003E\u003Ccode class=\"language-bash\"\n    data-lang=\"bash\"\u003Eytt \\\n  --file config.yml \\\n  --output-files path\u002Fto\u002Foutputs\u002Fdir\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect1\"\u003E\n\u003Ch2 id=\"_ytt_の文法についてのサンプル集\"\u003E📔 \u003Ccode\u003Eytt\u003C\u002Fcode\u003E の文法についてのサンプル集\u003C\u002Fh2\u003E\n\u003Cdiv class=\"sectionbody\"\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eとりあえずよく使いそうな分だけ（実装コストが高くなる制御構文（if文やfor文）などは除外）。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Ccode\u003Eytt\u003C\u002Fcode\u003E を試せる \u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002F#playground\" target=\"_blank\" rel=\"noopener\"\u003E\u003Cem\u003Eonline playground\u003C\u002Fem\u003E\u003C\u002Fa\u003E が公式で用意されているため、そこで試してみるといい。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"admonitionblock note\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"icon\"\u003E\n\u003Ci class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"\u003E\u003C\u002Fi\u003E\n\u003C\u002Ftd\u003E\n\u003Ctd class=\"content\"\u003E\n\u003Cdiv class=\"title\"\u003EYAMLドキュメント\u003C\u002Fdiv\u003E\n\u003Cem\u003EYAML\u003C\u002Fem\u003E ドキュメントは1ファイルに複数ふくめることができる（\u003Ccode\u003E---\u003C\u002Fcode\u003E 区切り）。\u003Cbr\u003E\nよって \u003Cem\u003Eファイル\u003C\u002Fem\u003E と \u003Cem\u003Eドキュメント\u003C\u002Fem\u003E の呼び方の違いに気をつける。\n\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_data-values\"\u003E外部の変数（ \u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Fytt-data-values\u002F\" target=\"_blank\" rel=\"noopener\"\u003E\u003Cem\u003EData Values\u003C\u002Fem\u003E\u003C\u002Fa\u003E ）\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E別ファイルに記述した \u003Cem\u003EYAML\u003C\u002Fem\u003E ドキュメントの \u003Ccode\u003E\u003Cem\u003Ekey:value\u003C\u002Fem\u003E\u003C\u002Fcode\u003E は、 \u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Fytt-data-values\u002F\" target=\"_blank\" rel=\"noopener\"\u003E\u003Cem\u003EData Values\u003C\u002Fem\u003E\u003C\u002Fa\u003E として宣言すれば変数として参照することができる。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Cem\u003EYAML\u003C\u002Fem\u003E ドキュメントに \u003Ccode\u003E@data\u002Fvalues\u003C\u002Fcode\u003E アノテーションをつければ \u003Cem\u003EData Values\u003C\u002Fem\u003E として宣言したことになる。\u003Cbr\u003E\nまた、テンプレートファイルから \u003Cem\u003EData Values\u003C\u002Fem\u003E を参照するには、ファイル先頭に \u003Ccode\u003E@ load(\"@ytt:data\", \"data\")\u003C\u002Fcode\u003E アノテーションをつける。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"exampleblock\"\u003E\n\u003Cdiv class=\"title\"\u003EExample 2. Data Values を使う例\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"content\"\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Evar_1.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E#@data\u002Fvalues   \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n---\nhoge: hoge value    \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E\nfoo:\n  fuga: fugafuga\nbar: old value\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cem\u003EData Values\u003C\u002Fem\u003E ファイルの宣言。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E2\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003Eそれぞれの値を記述。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Evar_2.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E#@data\u002Fvalues\n---\nbar: new value      \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n\n#@overlay\u002Fremove    \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E\nhoge:\n\n#@overlay\u002Fmatch missing_ok=True     \u003Ci class=\"conum\" data-value=\"3\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(3)\u003C\u002Fb\u003E\nbaz: add new key\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E既存の値を上書き。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E2\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E既存の \u003Cem\u003Ekey\u003C\u002Fem\u003E を削除。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"3\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E3\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E新しい \u003Cem\u003Ekey\u003C\u002Fem\u003E とその値を追加。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Etemplate.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E#@ load(\"@ytt:data\", \"data\")    \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n---\nvar1: #@ data.values.bar        \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E\nvar2: #@ data.values.foo.fuga\nvar3: #@ data.values.foo\nvar4: #@ data.values.baz\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cem\u003EData Values\u003C\u002Fem\u003E を読み込み。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E2\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E登録した \u003Cem\u003EData Values\u003C\u002Fem\u003E の各値を参照。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock no-line-numbers command-line\"\u003E\n\u003Cdiv class=\"title\"\u003E実行結果\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight command-line\" data-output=\"5-10\"\n    \u003E\u003Ccode class=\"language-bash\"\n    data-lang=\"bash\"\u003Eytt \\   \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n  --file template.yml \\\n  --file var_1.yml \\\n  --file var_2.yml\n\nvar1: new value\nvar2: fugafuga\nvar3:\n  fuga: fugafuga\nvar4: add new key\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003Eテンプレートと使用する \u003Cem\u003EData Values\u003C\u002Fem\u003E のファイルも一緒に指定する。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"admonitionblock caution\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"icon\"\u003E\n\u003Ci class=\"fa icon-caution\" title=\"Caution\" data-md-icon=\"local_fire_department\"\u003E\u003C\u002Fi\u003E\n\u003C\u002Ftd\u003E\n\u003Ctd class=\"content\"\u003E\n\u003Cdiv class=\"title\"\u003EData Values のキーについて\u003C\u002Fdiv\u003E\nキーは \u003Cem\u003Esnake_case\u003C\u002Fem\u003E 形式が推奨（つまり \u003Ccode\u003E-\u003C\u002Fcode\u003E は非推奨）。\u003Cbr\u003E\nこれは参照時に \u003Ccode\u003E.\u003C\u002Fcode\u003E を使った参照ができなくなるため。\n\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"admonitionblock important\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"icon\"\u003E\n\u003Ci class=\"fa icon-important\" title=\"Important\" data-md-icon=\"report\"\u003E\u003C\u002Fi\u003E\n\u003C\u002Ftd\u003E\n\u003Ctd class=\"content\"\u003E\n\u003Cdiv class=\"title\"\u003Eアノテーションのスペースについて\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Ccode\u003E#@\u003C\u002Fcode\u003E 後にスペースが必要なものと不要なものがある。\u003Cbr\u003E\nこれについては、\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"ulist\"\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Cem\u003EYAML\u003C\u002Fem\u003E 要素に働きかけるアノテーション（\u003Ccode\u003E@data\u002Fvalues\u003C\u002Fcode\u003E や \u003Ccode\u003E@overlay\u002Fmatch\u003C\u002Fcode\u003E）には\u003Cstrong\u003E不要\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E実際は \u003Ccode\u003Eytt\u003C\u002Fcode\u003E のディレクティブであるもの（\u003Ccode\u003E@ load\u003C\u002Fcode\u003E や \u003Ccode\u003E@ if\u003C\u002Fcode\u003E）には\u003Cstrong\u003E必要\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eということらしい（\u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Ffaq\u002F#when-should-i-include-a-space-in-my-ytt-comment-does-it-matter-is-it-load-or&#8212;&#8203;load-overlaymatch-or&#8212;&#8203;overlaymatch\" target=\"_blank\" rel=\"noopener\"\u003E詳細\u003C\u002Fa\u003E）。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect3\"\u003E\n\u003Ch4 id=\"_json_データを利用する\"\u003E\u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Ffaq\u002F#how-do-i-load-json-for-use-as-a-data-value\" target=\"_blank\" rel=\"noopener\"\u003E\u003Cem\u003EJSON\u003C\u002Fem\u003E データを利用する\u003C\u002Fa\u003E\u003C\u002Fh4\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eコマンドラインオプションの \u003Ccode\u003E--data-value-file\u003C\u002Fcode\u003E オプションでファイル内容を文字列として読み込み、それを \u003Cem\u003EJSON\u003C\u002Fem\u003E データとしてオブジェクトに変換すればいい。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"exampleblock\"\u003E\n\u003Cdiv class=\"title\"\u003EExample 3. JSONファイルを読み込む\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"content\"\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Econf.json\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-json\"\n    data-lang=\"json\"\u003E{\n  \"version\": \"1.2.3\",\n  \"levels\": [\"info\", \"warn\", \"error\"]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Etemplate.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E#@ load(\"@ytt:data\", \"data\")\n#@ load(\"@ytt:json\", \"json\")      \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n#@ load(\"@ytt:struct\", \"struct\")  \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n\n---\n#@ config = struct.encode(\\   \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E\n#@    json.decode(data.values.config)\\  \u003Ci class=\"conum\" data-value=\"3\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(3)\u003C\u002Fb\u003E\n#@  )\njson:\n  version: #@ config.version\n  levels: #@ config.levels\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cem\u003EJSON\u003C\u002Fem\u003E や \u003Ccode\u003Estruct\u003C\u002Fcode\u003E 型のモジュールを読み込み。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E2\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003Eプロパティを \u003Ccode\u003E.\u003C\u002Fcode\u003E から参照できるように \u003Ccode\u003Edict\u003C\u002Fcode\u003E 型の値を \u003Ccode\u003Estruct\u003C\u002Fcode\u003E 型に変換。\u003Cbr\u003E\n（末尾の \u003Ccode\u003E\\\u003C\u002Fcode\u003E は \u003Cem\u003EStarlark\u003C\u002Fem\u003E 言語における改行のエスケープ）\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"3\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E3\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Ccode\u003E--data-value-file\u003C\u002Fcode\u003E で読み込んだ \u003Cem\u003EJSON\u003C\u002Fem\u003E ファイルの内容（文字列）を \u003Ccode\u003Edict\u003C\u002Fcode\u003E 型の値として変換。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock no-line-numbers command-line\"\u003E\n\u003Cdiv class=\"title\"\u003E実行結果\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight command-line\" data-output=\"4-10\"\n    \u003E\u003Ccode class=\"language-bash\"\n    data-lang=\"bash\"\u003Eytt \\\n  --file template.yml \\\n  --data-value-file config=conf.json  \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n\njson:\n  version: 1.2.3\n  levels:\n  - info\n  - warn\n  - error\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Ccode\u003E&lt;key&gt;=&lt;\u002Fpath\u002Fto\u002Ffile&gt;\u003C\u002Fcode\u003E の書式。\u003Cbr\u003E\n指定した \u003Ccode\u003Ekey\u003C\u002Fcode\u003E の値にファイル内容を文字列として読み込む。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_overlays\"\u003Eパッチの適用（ \u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Fytt-overlays\u002F\" target=\"_blank\" rel=\"noopener\"\u003E\u003Cem\u003EOverlays\u003C\u002Fem\u003E\u003C\u002Fa\u003E ）\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eテンプレートや \u003Cem\u003EData Values\u003C\u002Fem\u003E の設定の一部だけを変更したり、共通の設定を適用したりすることができる。\u003Cbr\u003E\n\u003Cem\u003EOverlays\u003C\u002Fem\u003E として宣言するには、\u003Cem\u003EYAML\u003C\u002Fem\u003E ドキュメントに \u003Ccode\u003E@overlay\u002Fmatch\u003C\u002Fcode\u003E アノテーションをつける。\u003Cbr\u003E\nまた \u003Cem\u003EOverlays\u003C\u002Fem\u003E の関数などを使うには、ファイルの先頭で \u003Ccode\u003E#@ load(\"@ytt:overlay\", \"overlay\")\u003C\u002Fcode\u003E アノテーションを記述しておく。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Cem\u003EOverlays\u003C\u002Fem\u003E は \u003Cem\u003EYAML\u003C\u002Fem\u003E テンプレートが描画されたあとに適用される。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E他、\u003Cem\u003EOverlays\u003C\u002Fem\u003E についての詳細はこちらの\u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Flang-ref-ytt-overlay\u002F\" target=\"_blank\" rel=\"noopener\"\u003E公式ドキュメント\u003C\u002Fa\u003Eを参照。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"exampleblock\"\u003E\n\u003Cdiv class=\"title\"\u003EExample 4. Overlaysを使ったパッチ適用例\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"content\"\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Econfig.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003Ename: overlay sample\nversion: 1.2.3\nmetadata:\n  - name: example-ingress1\n    tag:\n      - \"hoge\"\n    annotations:\n      message: removed this message\n    overrides:\n      - hoge\n      - foo\n  - name: example2\n    tag:\n      - foo\n    annotations:\n      message: left message\n    overrides:\n      - yoho\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Epatch.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E#@ load(\"@ytt:overlay\", \"overlay\")  \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n\n#@overlay\u002Fmatch by=overlay.all  \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E\n---\nmetadata:\n  #@overlay\u002Fmatch by=overlay.subset({\"name\": \"example-ingress1\"})  \u003Ci class=\"conum\" data-value=\"3\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(3)\u003C\u002Fb\u003E\n  - tag:\n      - \"fuga\"\n    annotations:\n      #@overlay\u002Fremove    \u003Ci class=\"conum\" data-value=\"4\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(4)\u003C\u002Fb\u003E\n      message:\n    #@overlay\u002Fmatch missing_ok=True   \u003Ci class=\"conum\" data-value=\"5\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(5)\u003C\u002Fb\u003E\n    config:\n      var1: hoge\n      var2: fuga\n\n#@overlay\u002Fmatch by=overlay.subset({\"metadata\": []})  \u003Ci class=\"conum\" data-value=\"6\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(6)\u003C\u002Fb\u003E\n---\nmetadata:\n  #@overlay\u002Fmatch by=overlay.all, expects=\"1+\"  \u003Ci class=\"conum\" data-value=\"7\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(7)\u003C\u002Fb\u003E\n  - overrides:\n      - add value\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cem\u003EOverlays\u003C\u002Fem\u003E ライブラリを読み込み。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E2\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cem\u003EOverlays\u003C\u002Fem\u003E 用のドキュメントであることを宣言。\u003Cbr\u003E\nかつ \u003Cem\u003EOverlays\u003C\u002Fem\u003E を適用する \u003Cem\u003EYAML\u003C\u002Fem\u003E 要素のパターンマッチ方法を指定（\u003Ccode\u003Eby\u003C\u002Fcode\u003E）。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"3\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E3\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E指定した \u003Cem\u003EYAML\u003C\u002Fem\u003E 要素と一致する要素を上書き対象とする。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"4\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E4\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E下記のキーを削除する。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"5\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E5\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E既存のキーが存在しないときは新しく追加したい場合、\u003Ccode\u003Emissing_ok=True\u003C\u002Fcode\u003E を指定する。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"6\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E6\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E詳細な値を指定したくないときは、空の値（\u003Ccode\u003E[]\u003C\u002Fcode\u003E, \u003Ccode\u003E{}\u003C\u002Fcode\u003E）を指定すればいい。\u003Cbr\u003E\nが、こういう場合は \u003Ccode\u003Eoverlay.all()\u003C\u002Fcode\u003E を使ったほうがいい。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"7\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E7\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Ccode\u003Eexpects\u003C\u002Fcode\u003E でマッチすべき回数を指定。この回数に該当しなければエラーとなる。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock no-line-numbers command-line\"\u003E\n\u003Cdiv class=\"title\"\u003E実行結果\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight command-line\" data-output=\"2-25\"\n    \u003E\u003Ccode class=\"language-bash\"\n    data-lang=\"bash\"\u003Eytt --file config.yml --file patch.yml\n\nname: overlay sample\nversion: 1.2.3\nmetadata:\n- name: example-ingress1\n  tag:\n  - hoge\n  - fuga\n  annotations: {}\n  overrides:\n  - hoge\n  - foo\n  - add value\n  config:\n    var1: hoge\n    var2: fuga\n- name: example2\n  tag:\n  - foo\n  annotations:\n    message: left message\n  overrides:\n  - yoho\n  - add value\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"admonitionblock tip\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"icon\"\u003E\n\u003Ci class=\"fa icon-tip\" title=\"Tip\" data-md-icon=\"emoji_objects\"\u003E\u003C\u002Fi\u003E\n\u003C\u002Ftd\u003E\n\u003Ctd class=\"content\"\u003E\n\u003Cdiv class=\"title\"\u003E配列の値の置換について\u003C\u002Fdiv\u003E\n配列の値を追加したり空にしたりすることは簡単にできるが、置換することは難しい。\u003Cbr\u003E\nある程度あきらめたほうがよさそう。\n\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Ctable class=\"tableblock frame-all grid-all fit-content\"\u003E\n\u003Ccaption class=\"title\"\u003ETable 1. \u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Flang-ref-ytt-overlay\u002F#overlay-annotations\" target=\"_blank\" rel=\"noopener\"\u003EOverlays アノテーション\u003C\u002Fa\u003E（一部）\u003C\u002Fcaption\u003E\n\u003Ccolgroup\u003E\n\u003Ccol\u003E\n\u003Ccol\u003E\n\u003C\u002Fcolgroup\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth class=\"tableblock halign-left valign-top\"\u003Eアノテーション\u003C\u002Fth\u003E\n\u003Cth class=\"tableblock halign-left valign-top\"\u003E説明\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E\u003Ccode\u003E@overlay\u002Fmatch\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003Eどの要素を修正・上書きするかを指定する。\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E\u003Ccode\u003E@overlay\u002Fmatch-child-defaults\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E\u003Ccode\u003Eexpects\u003C\u002Fcode\u003E や \u003Ccode\u003Emissing_ok\u003C\u002Fcode\u003E の設定値を子要素にデフォルト値としてつける。\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E\u003Ccode\u003E@overlay\u002Fremove\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E一致した要素を削除する。\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E\u003Ccode\u003E@overlay\u002Freplace\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E一致した要素の値を置換する。\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Ctable class=\"tableblock frame-all grid-all fit-content\"\u003E\n\u003Ccaption class=\"title\"\u003ETable 2. \u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Flang-ref-ytt-overlay\u002F#overlaymatch\" target=\"_blank\" rel=\"noopener\"\u003EMatcher関数\u003C\u002Fa\u003E（一部）\u003C\u002Fcaption\u003E\n\u003Ccolgroup\u003E\n\u003Ccol\u003E\n\u003Ccol\u003E\n\u003C\u002Fcolgroup\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth class=\"tableblock halign-left valign-top\"\u003E関数\u003C\u002Fth\u003E\n\u003Cth class=\"tableblock halign-left valign-top\"\u003E説明\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E\u003Ccode\u003Eoverlay.all()\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E記述した要素をすべて含む要素を検索する。\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E\u003Ccode\u003Eoverlay.subset(\u003Cem\u003ETARGET\u003C\u002Fem\u003E)\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003Ctd class=\"tableblock halign-left valign-top\"\u003E\u003Cp class=\"tableblock\"\u003E\u003Ccode\u003E\u003Cem\u003ETARGET\u003C\u002Fem\u003E\u003C\u002Fcode\u003E で指定した要素の構造と一致する要素を検索する。\u003C\u002Fp\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Cdiv class=\"admonitionblock note\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd class=\"icon\"\u003E\n\u003Ci class=\"fa icon-note\" title=\"Note\" data-md-icon=\"info\"\u003E\u003C\u002Fi\u003E\n\u003C\u002Ftd\u003E\n\u003Ctd class=\"content\"\u003E\n\u003Ccode\u003Eoverlay.map_key(&#8230;&#8203;)\u003C\u002Fcode\u003E は理解が不十分なせいで期待通りの動作をしてくれないことが多かった。\u003Cbr\u003E\nなので少し冗長でも \u003Ccode\u003Eoverlay.subset(&#8230;&#8203;)\u003C\u002Fcode\u003E を使ったほうがイライラせずにすんだ。\n\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect3\"\u003E\n\u003Ch4 id=\"_共通の設定項目を定義する\"\u003E共通の設定項目を定義する\u003C\u002Fh4\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Ccode\u003Eruns-on\u003C\u002Fcode\u003E とかの共通設定は1回の記述で済ませたい。\u003Cbr\u003E\nそういう場合にも \u003Cem\u003EOverlays\u003C\u002Fem\u003E が有効。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"exampleblock\"\u003E\n\u003Cdiv class=\"title\"\u003EExample 5. Overlays で共通設定を定義\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"content\"\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Ccode\u003Eruns-on\u003C\u002Fcode\u003E の値と、ステップの最初に行う \u003Ccode\u003Euses: actions\u002Fcheckout@v2\u003C\u002Fcode\u003E を共通化。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Ecommons-patch.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E#@ load(\"@ytt:overlay\", \"overlay\")\n\n#@overlay\u002Fmatch by=overlay.all, expects=\"1+\"\n---\njobs:\n  #@overlay\u002Fmatch by=overlay.all, expects=\"1+\"\n  _:  \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n    #@overlay\u002Fmatch missing_ok=True\n    runs-on: ubuntu-20.04\n\n    steps:\n      #@overlay\u002Fmatch by=overlay.index(0)   \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E\n      #@overlay\u002Finsert before=True  \u003Ci class=\"conum\" data-value=\"3\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(3)\u003C\u002Fb\u003E\n      - name: Checkout code\n        uses: actions\u002Fcheckout@v2\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E任意のキー名としたい場合、\u003Ccode\u003E_\u003C\u002Fcode\u003E と指定する。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E2\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E最初の配列要素を検索。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"3\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E3\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E上記で検索された要素の前に、この \u003Cem\u003EYAML\u003C\u002Fem\u003E 要素を挿入させる。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eもしあるファイルでは別の設定にしたい場合、それ用の \u003Cem\u003EOverlays\u003C\u002Fem\u003E を設定して上書きさせればいい。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_template_モジュール\"\u003E\u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Flang-ref-ytt-template\u002F\" target=\"_blank\" rel=\"noopener\"\u003E\u003Cem\u003ETemplate\u003C\u002Fem\u003E モジュール\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E既存の \u003Cem\u003EYAML\u003C\u002Fem\u003E 要素をまるごと置換する \u003Ccode\u003Etemplate.replace()\u003C\u002Fcode\u003E 関数が利用できる。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E例として、\u003Cem\u003EGitHub Actions ワークフロー\u003C\u002Fem\u003E においては \u003Ccode\u003Esteps\u003C\u002Fcode\u003E キーが配列を格納するので、ここでよく使いそう。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"exampleblock\"\u003E\n\u003Cdiv class=\"title\"\u003EExample 6. GitHub Actions ワークフローにおける利用例\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"content\"\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Evars.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E#@data\u002Fvalues\n---\nsetup:\n  - name: Checkout code\n    uses: actions\u002Fcheckout@v2\n  - name: Set up QEMU\n    uses: docker\u002Fsetup-qemu-action@v1\n  - name: Set up Docker Buildx\n    uses: docker\u002Fsetup-buildx-action@v1\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Eworkflow-template.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E#@ load(\"@ytt:data\", \"data\")\n#@ load(\"@ytt:template\", \"template\")  \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n---\n...\njobs:\n  docker:\n    name: docker \u002F build\n    runs-on: ubuntu-20.04\n    steps:\n      -  #@ template.replace(data.values.setup)   \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E\n      - ...\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cem\u003ETemplate\u003C\u002Fem\u003E ライブラリを読み込み。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E2\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003Eここの配列要素を \u003Ccode\u003Esetup\u003C\u002Fcode\u003E の \u003Cem\u003EYAML\u003C\u002Fem\u003E 要素で置換している。\u003Cbr\u003E\nこれによって二次元配列にならずに済む。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock no-line-numbers command-line\"\u003E\n\u003Cdiv class=\"title\"\u003E実行結果\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight command-line\" data-output=\"2-16\"\n    \u003E\u003Ccode class=\"language-bash\"\n    data-lang=\"bash\"\u003Eytt --file workflow-template.yml --file vars.yml\n\n...\njobs:\n  docker:\n    name: docker \u002F build\n    runs-on: ubuntu-20.04\n    steps:\n    - name: Checkout code\n      uses: actions\u002Fcheckout@v2\n    - name: Set up QEMU\n      uses: docker\u002Fsetup-qemu-action@v1\n    - name: Set up Docker Buildx\n      uses: docker\u002Fsetup-buildx-action@v1\n    - ...\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_文字列のテンプレートtext_templating\"\u003E文字列のテンプレート（\u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Fytt-text-templating\u002F\" target=\"_blank\" rel=\"noopener\"\u003E\u003Cem\u003EText Templating\u003C\u002Fem\u003E\u003C\u002Fa\u003E ）\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Ccode\u003E#@yaml\u002Ftext-templated-strings\u003C\u002Fcode\u003E アノテーションをつける。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eテンプレート文字列（文字列補間）を使いたいときに使う。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"exampleblock\"\u003E\n\u003Cdiv class=\"title\"\u003EExample 7. テンプレート文字列（文字列補間）\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"content\"\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Ccode\u003E@yaml\u002Ftext-templated-strings\u003C\u002Fcode\u003E アノテーションをつけた上で \u003Ccode\u003E(@\u003C\u002Fcode\u003E と \u003Ccode\u003E@)\u003C\u002Fcode\u003E で囲んだ部分が変数展開される。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Econfig.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E#@ val1 = \"value1\"  \u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(1)\u003C\u002Fb\u003E\n#@ val2 = \"value2\"\n\n#@yaml\u002Ftext-templated-strings   \u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(2)\u003C\u002Fb\u003E\n---\nnormal: \"val1 is (@= val1 @) and val2 is (@= val2 @)\"   \u003Ci class=\"conum\" data-value=\"3\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(3)\u003C\u002Fb\u003E\nno_output: \"val1 is (@ val1 @) and val2 is (@ val2 @)\"  \u003Ci class=\"conum\" data-value=\"4\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(4)\u003C\u002Fb\u003E\ntrim_spaces: \"val1 is (@-= val1 -@) and val2 is (@-= val2 @)\"   \u003Ci class=\"conum\" data-value=\"5\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(5)\u003C\u002Fb\u003E\n\nkey_(@= val1 @): used in key    \u003Ci class=\"conum\" data-value=\"6\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E(6)\u003C\u002Fb\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"colist arabic\"\u003E\n\u003Ctable\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"1\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E1\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E変数を定義。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"2\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E2\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003Eテンプレート文字列を使うためのアノテーション。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"3\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E3\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E通常使用。変数展開された値は\u003Cstrong\u003E文字列\u003C\u002Fstrong\u003Eとして扱われる。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"4\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E4\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Ccode\u003E=\u003C\u002Fcode\u003E をつけない場合、変数展開されない。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"5\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E5\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Ccode\u003E-\u003C\u002Fcode\u003E をつけた側のスペースが除去される。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ci class=\"conum\" data-value=\"6\"\u003E\u003C\u002Fi\u003E\u003Cb\u003E6\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003Eキーにも変数展開が使える。\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock no-line-numbers command-line\"\u003E\n\u003Cdiv class=\"title\"\u003E実行結果\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight command-line\" data-output=\"2-10\"\n    \u003E\u003Ccode class=\"language-bash\"\n    data-lang=\"bash\"\u003Eytt --file config.yml\nnormal: val1 is value1 and val2 is value2\nno_output: 'val1 is  and val2 is '\ntrim_spaces: val1 isvalue1and val2 isvalue2\nkey_value1: used in key\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_コメント\"\u003Eコメント\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Ccode\u003E#!\u003C\u002Fcode\u003E で始めるとコメントとして使われる。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"exampleblock\"\u003E\n\u003Cdiv class=\"title\"\u003EExample 8. コメント\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"content\"\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Ecomment.yml\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E---\n#! This is  comment\nhoge: sample-for-comment\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock no-line-numbers command-line\"\u003E\n\u003Cdiv class=\"title\"\u003E実行結果\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight command-line\" data-output=\"2-10\"\n    \u003E\u003Ccode class=\"language-bash\"\n    data-lang=\"bash\"\u003Eytt --file comment.yml\nhoge: sample-for-comment\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_その他\"\u003Eその他\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Cem\u003EStruct\u003C\u002Fem\u003E とか \u003Cem\u003ELibrary\u003C\u002Fem\u003E とか if文とか関数とか。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E詳しくは\u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002F\" target=\"_blank\" rel=\"noopener\"\u003E公式ドキュメント\u003C\u002Fa\u003Eを参考。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect1\"\u003E\n\u003Ch2 id=\"_faq\"\u003E🍣FAQ\u003C\u002Fh2\u003E\n\u003Cdiv class=\"sectionbody\"\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_anchoralias_は使えるの\"\u003Eanchor\u002Falias は使えるの？\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E普通に使える。\u003Cbr\u003E\nその上 \u003Ccode\u003Eytt\u003C\u002Fcode\u003E で出力された \u003Cem\u003EYAML\u003C\u002Fem\u003E ドキュメントは \u003Cem\u003Ealias\u003C\u002Fem\u003E が展開されるので、anchor\u002Falias が使えない \u003Cem\u003EGitHub Actions ワークフロー\u003C\u002Fem\u003E でも安心して利用できる。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eただまあ、\u003Ccode\u003Eytt\u003C\u002Fcode\u003E を使うなら \u003Cem\u003Eanchor\u002Falias\u003C\u002Fem\u003E の代わりに\u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002Fdocs\u002Flatest\u002Flang-ref-def\u002F\" target=\"_blank\" rel=\"noopener\"\u003E関数\u003C\u002Fa\u003Eを利用したほうが筋はいいかも。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_datavalues_で定義した変数を別の_datavalues_から参照したい\"\u003E\u003Ccode\u003Edata\u002Fvalues\u003C\u002Fcode\u003E で定義した変数を別の \u003Ccode\u003Edata\u002Fvalues\u003C\u002Fcode\u003E から参照したい\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E現状では \u003Ccode\u003Edata\u002Fvalues\u003C\u002Fcode\u003E のファイルが全て読み込まれるまでは参照できないため、無理らしい（\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvmware-tanzu\u002Fcarvel-ytt\u002Fissues\u002F309\" target=\"_blank\" rel=\"noopener\"\u003Eissues #309\u003C\u002Fa\u003E）。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eなので代わりに \u003Cem\u003EOverlays\u003C\u002Fem\u003E でパッチをあてたり、\u003Cem\u003ELibrary\u003C\u002Fem\u003E を使って参照したりしてみる。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect2\"\u003E\n\u003Ch3 id=\"_on_キーが_true_に変換されてしまう\"\u003E\u003Ccode\u003Eon\u003C\u002Fcode\u003E キーが \u003Ccode\u003Etrue\u003C\u002Fcode\u003E に変換されてしまう\u003C\u002Fh3\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fyaml.org\u002Ftype\u002Fbool.html\" target=\"_blank\" rel=\"noopener\"\u003E\u003Cem\u003EYAML Version 1.1\u003C\u002Fem\u003E の仕様\u003C\u002Fa\u003Eのせい。\u003Cbr\u003E\nダブルクォーテーション \u003Ccode\u003E\"\u003C\u002Fcode\u003E で囲み、文字列として扱わせるといい。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv \n    class=\"listingblock\"\u003E\n\u003Cdiv class=\"title\"\u003Eonキーが true に変換されないようにする\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"content\"\u003E\n  \u003Cpre class=\"highlight \" \u003E\u003Ccode class=\"language-yaml\"\n    data-lang=\"yaml\"\u003E\"on\":\n  push: {}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect1\"\u003E\n\u003Ch2 id=\"_おわりに\"\u003E😎おわりに\u003C\u002Fh2\u003E\n\u003Cdiv class=\"sectionbody\"\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003E\u003Ccode\u003Eytt\u003C\u002Fcode\u003E のサンプルがいまいちわからなかったので実際に試してみたのを書いた。\u003Cbr\u003E\nただ \u003Cem\u003EOverlays\u003C\u002Fem\u003E はすごい便利なんだけど \u003Ccode\u003Ematch\u003C\u002Fcode\u003E 条件が全然わからん。ふんいきで使ってる。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eなお、作成した \u003Ccode\u003Eytt\u003C\u002Fcode\u003E 用のテンプレートのままでは \u003Cem\u003EGitHub\u003C\u002Fem\u003E で使えないので、\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"ulist\"\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Cem\u003EGit Hooks\u003C\u002Fem\u003E で \u003Ccode\u003Egit push\u003C\u002Fcode\u003E 前にコンパイル\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E別の \u003Cem\u003EGitHub Actions ワークフロー\u003C\u002Fem\u003E でコンパイルさせてコミットを追加\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"paragraph\"\u003E\n\u003Cp\u003Eしたりするのがよさそう。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"sect1\"\u003E\n\u003Ch2 id=\"_参考\"\u003E📖参考\u003C\u002Fh2\u003E\n\u003Cdiv class=\"sectionbody\"\u003E\n\u003Cdiv class=\"ulist\"\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fcarvel.dev\u002Fytt\u002F\" target=\"_blank\" rel=\"noopener\"\u003ECarvel - Carvel - ytt\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvmware-tanzu\u002Fcarvel-ytt\" target=\"_blank\" rel=\"noopener\"\u003Evmware-tanzu\u002Fcarvel-ytt: YAML templating tool that works on YAML structure instead of text\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E",title:"GitHub Actions ワークフローを YAML テンプレートツール（ytt）で楽に生成したい！",created_at:b,tags:["yaml","ytt","github-actions"],updated_at:b,author:"秋々すすき",description:a,revision:"1.1",revision_remark:a},navi:{next:{path:c,title:c},prev:{path:"\u002Fposts\u002Fprismjs_keep_markup",title:"Prism.jsでコードブロック内に記述したHTMLタグを維持したい"}},currentPath:"https:\u002F\u002Fvlike-vlife.netlify.app\u002Fposts\u002Fyaml_template_tool"}],fetch:{},mutations:a}}(void 0,"2021-06-18","")));